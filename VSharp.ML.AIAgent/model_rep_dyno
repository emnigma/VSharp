ir_version: 7
producer_name: "pytorch"
producer_version: "2.0.1"
graph {
  node {
    input: "state_encoder.conv1.bias"
    output: "state_encoder.conv2.bias"
    name: "Identity_0"
    op_type: "Identity"
  }
  node {
    input: "x_dict"
    output: "/state_encoder/conv1/Shape_output_0"
    name: "/state_encoder/conv1/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv1/Constant_output_0"
    name: "/state_encoder/conv1/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_1_output_0"
    name: "/state_encoder/conv1/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_2_output_0"
    name: "/state_encoder/conv1/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Shape_output_0"
    input: "/state_encoder/conv1/Constant_1_output_0"
    input: "/state_encoder/conv1/Constant_2_output_0"
    input: "/state_encoder/conv1/Constant_output_0"
    output: "/state_encoder/conv1/Slice_output_0"
    name: "/state_encoder/conv1/Slice"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv1/Constant_3_output_0"
    name: "/state_encoder/conv1/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Slice_output_0"
    input: "/state_encoder/conv1/Constant_3_output_0"
    output: "/state_encoder/conv1/Squeeze_output_0"
    name: "/state_encoder/conv1/Squeeze"
    op_type: "Squeeze"
  }
  node {
    output: "/state_encoder/conv1/Constant_4_output_0"
    name: "/state_encoder/conv1/Constant_4"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "edge_attr_dict"
    output: "/state_encoder/conv1/Shape_1_output_0"
    name: "/state_encoder/conv1/Shape_1"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv1/Constant_5_output_0"
    name: "/state_encoder/conv1/Constant_5"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Shape_1_output_0"
    input: "/state_encoder/conv1/Constant_5_output_0"
    output: "/state_encoder/conv1/Gather_output_0"
    name: "/state_encoder/conv1/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "onnx::Unsqueeze_46"
    name: "Constant_12"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Gather_output_0"
    input: "onnx::Unsqueeze_46"
    output: "/state_encoder/conv1/Unsqueeze_output_0"
    name: "/state_encoder/conv1/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv1/Unsqueeze_output_0"
    output: "/state_encoder/conv1/Concat_output_0"
    name: "/state_encoder/conv1/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Concat_output_0"
    output: "/state_encoder/conv1/ConstantOfShape_output_0"
    name: "/state_encoder/conv1/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\200?"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_6_output_0"
    name: "/state_encoder/conv1/Constant_6"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "edge_attr_dict"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv1/Gather_1_output_0"
    name: "/state_encoder/conv1/Gather_1"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "edge_attr_dict"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv1/Gather_2_output_0"
    name: "/state_encoder/conv1/Gather_2"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_7_output_0"
    name: "/state_encoder/conv1/Constant_7"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Gather_2_output_0"
    input: "/state_encoder/conv1/Constant_7_output_0"
    output: "/state_encoder/conv1/Reshape_output_0"
    name: "/state_encoder/conv1/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/ConstantOfShape_output_0"
    output: "/state_encoder/conv1/Shape_2_output_0"
    name: "/state_encoder/conv1/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv1/Reshape_output_0"
    input: "/state_encoder/conv1/Shape_2_output_0"
    output: "/state_encoder/conv1/Expand_output_0"
    name: "/state_encoder/conv1/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_57"
    name: "Constant_23"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Squeeze_output_0"
    input: "onnx::Unsqueeze_57"
    output: "/state_encoder/conv1/Unsqueeze_1_output_0"
    name: "/state_encoder/conv1/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv1/Unsqueeze_1_output_0"
    output: "/state_encoder/conv1/Concat_1_output_0"
    name: "/state_encoder/conv1/Concat_1"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Concat_1_output_0"
    output: "/state_encoder/conv1/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv1/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/ConstantOfShape_1_output_0"
    output: "/state_encoder/conv1/Shape_3_output_0"
    name: "/state_encoder/conv1/Shape_3"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv1/Shape_3_output_0"
    output: "/state_encoder/conv1/ConstantOfShape_2_output_0"
    name: "/state_encoder/conv1/ConstantOfShape_2"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/ConstantOfShape_2_output_0"
    input: "/state_encoder/conv1/Expand_output_0"
    input: "/state_encoder/conv1/ConstantOfShape_output_0"
    output: "/state_encoder/conv1/ScatterElements_output_0"
    name: "/state_encoder/conv1/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv1/ScatterElements_output_0"
    output: "/state_encoder/conv1/Add_output_0"
    name: "/state_encoder/conv1/Add"
    op_type: "Add"
  }
  node {
    output: "/state_encoder/conv1/Constant_8_output_0"
    name: "/state_encoder/conv1/Constant_8"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\000\277"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Add_output_0"
    input: "/state_encoder/conv1/Constant_8_output_0"
    output: "/state_encoder/conv1/Pow_output_0"
    name: "/state_encoder/conv1/Pow"
    op_type: "Pow"
  }
  node {
    output: "/state_encoder/conv1/Constant_9_output_0"
    name: "/state_encoder/conv1/Constant_9"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\200\177"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Pow_output_0"
    input: "/state_encoder/conv1/Constant_9_output_0"
    output: "/state_encoder/conv1/Equal_output_0"
    name: "/state_encoder/conv1/Equal"
    op_type: "Equal"
  }
  node {
    input: "/state_encoder/conv1/Equal_output_0"
    output: "/state_encoder/conv1/Cast_output_0"
    name: "/state_encoder/conv1/Cast"
    op_type: "Cast"
    attribute {
      name: "to"
      i: 9
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_10_output_0"
    name: "/state_encoder/conv1/Constant_10"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Cast_output_0"
    input: "/state_encoder/conv1/Constant_10_output_0"
    input: "/state_encoder/conv1/Pow_output_0"
    output: "/state_encoder/conv1/Where_output_0"
    name: "/state_encoder/conv1/Where"
    op_type: "Where"
  }
  node {
    input: "/state_encoder/conv1/Where_output_0"
    input: "/state_encoder/conv1/Gather_1_output_0"
    output: "/state_encoder/conv1/Gather_3_output_0"
    name: "/state_encoder/conv1/Gather_3"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Gather_3_output_0"
    input: "/state_encoder/conv1/ConstantOfShape_output_0"
    output: "/state_encoder/conv1/Mul_output_0"
    name: "/state_encoder/conv1/Mul"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv1/Where_output_0"
    input: "/state_encoder/conv1/Gather_2_output_0"
    output: "/state_encoder/conv1/Gather_4_output_0"
    name: "/state_encoder/conv1/Gather_4"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Mul_output_0"
    input: "/state_encoder/conv1/Gather_4_output_0"
    output: "/state_encoder/conv1/Mul_1_output_0"
    name: "/state_encoder/conv1/Mul_1"
    op_type: "Mul"
  }
  node {
    input: "x_dict"
    input: "onnx::MatMul_430"
    output: "/state_encoder/conv1/lins.0/MatMul_output_0"
    name: "/state_encoder/conv1/lins.0/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "edge_attr_dict"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv1/Gather_5_output_0"
    name: "/state_encoder/conv1/Gather_5"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "x_dict"
    input: "/state_encoder/conv1/Gather_5_output_0"
    output: "/state_encoder/conv1/Gather_6_output_0"
    name: "/state_encoder/conv1/Gather_6"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_attr_dict"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv1/Gather_7_output_0"
    name: "/state_encoder/conv1/Gather_7"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_11_output_0"
    name: "/state_encoder/conv1/Constant_11"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Mul_1_output_0"
    input: "/state_encoder/conv1/Constant_11_output_0"
    output: "/state_encoder/conv1/Reshape_1_output_0"
    name: "/state_encoder/conv1/Reshape_1"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Reshape_1_output_0"
    input: "/state_encoder/conv1/Gather_6_output_0"
    output: "/state_encoder/conv1/Mul_2_output_0"
    name: "/state_encoder/conv1/Mul_2"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv1/Mul_2_output_0"
    output: "/state_encoder/conv1/aggr_module/Shape_output_0"
    name: "/state_encoder/conv1/aggr_module/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv1/aggr_module/Constant_output_0"
    name: "/state_encoder/conv1/aggr_module/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Shape_output_0"
    input: "/state_encoder/conv1/aggr_module/Constant_output_0"
    output: "/state_encoder/conv1/aggr_module/Gather_output_0"
    name: "/state_encoder/conv1/aggr_module/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv1/aggr_module/Constant_1_output_0"
    name: "/state_encoder/conv1/aggr_module/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Gather_7_output_0"
    input: "/state_encoder/conv1/aggr_module/Constant_1_output_0"
    output: "/state_encoder/conv1/aggr_module/Reshape_output_0"
    name: "/state_encoder/conv1/aggr_module/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Mul_2_output_0"
    output: "/state_encoder/conv1/aggr_module/Shape_1_output_0"
    name: "/state_encoder/conv1/aggr_module/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Reshape_output_0"
    input: "/state_encoder/conv1/aggr_module/Shape_1_output_0"
    output: "/state_encoder/conv1/aggr_module/Expand_output_0"
    name: "/state_encoder/conv1/aggr_module/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_91"
    name: "Constant_56"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Squeeze_output_0"
    input: "onnx::Unsqueeze_91"
    output: "/state_encoder/conv1/aggr_module/Unsqueeze_output_0"
    name: "/state_encoder/conv1/aggr_module/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "onnx::Unsqueeze_93"
    name: "Constant_58"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Gather_output_0"
    input: "onnx::Unsqueeze_93"
    output: "/state_encoder/conv1/aggr_module/Unsqueeze_1_output_0"
    name: "/state_encoder/conv1/aggr_module/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Unsqueeze_output_0"
    input: "/state_encoder/conv1/aggr_module/Unsqueeze_1_output_0"
    output: "/state_encoder/conv1/aggr_module/Concat_output_0"
    name: "/state_encoder/conv1/aggr_module/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Concat_output_0"
    output: "/state_encoder/conv1/aggr_module/ConstantOfShape_output_0"
    name: "/state_encoder/conv1/aggr_module/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/ConstantOfShape_output_0"
    output: "/state_encoder/conv1/aggr_module/Shape_2_output_0"
    name: "/state_encoder/conv1/aggr_module/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Shape_2_output_0"
    output: "/state_encoder/conv1/aggr_module/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv1/aggr_module/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv1/aggr_module/Expand_output_0"
    input: "/state_encoder/conv1/Mul_2_output_0"
    output: "/state_encoder/conv1/aggr_module/ScatterElements_output_0"
    name: "/state_encoder/conv1/aggr_module/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/ConstantOfShape_output_0"
    input: "/state_encoder/conv1/aggr_module/ScatterElements_output_0"
    output: "/state_encoder/conv1/aggr_module/Add_output_0"
    name: "/state_encoder/conv1/aggr_module/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Add_output_0"
    input: "onnx::MatMul_431"
    output: "/state_encoder/conv1/MatMul_output_0"
    name: "/state_encoder/conv1/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv1/lins.0/MatMul_output_0"
    input: "/state_encoder/conv1/MatMul_output_0"
    output: "/state_encoder/conv1/Add_1_output_0"
    name: "/state_encoder/conv1/Add_1"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Add_output_0"
    output: "/state_encoder/conv1/Shape_4_output_0"
    name: "/state_encoder/conv1/Shape_4"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv1/Constant_12_output_0"
    name: "/state_encoder/conv1/Constant_12"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_13_output_0"
    name: "/state_encoder/conv1/Constant_13"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv1/Constant_14_output_0"
    name: "/state_encoder/conv1/Constant_14"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Shape_4_output_0"
    input: "/state_encoder/conv1/Constant_13_output_0"
    input: "/state_encoder/conv1/Constant_14_output_0"
    input: "/state_encoder/conv1/Constant_12_output_0"
    output: "/state_encoder/conv1/Slice_1_output_0"
    name: "/state_encoder/conv1/Slice_1"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv1/Constant_15_output_0"
    name: "/state_encoder/conv1/Constant_15"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Slice_1_output_0"
    input: "/state_encoder/conv1/Constant_15_output_0"
    output: "/state_encoder/conv1/Squeeze_1_output_0"
    name: "/state_encoder/conv1/Squeeze_1"
    op_type: "Squeeze"
  }
  node {
    input: "edge_attr_dict"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv1/Gather_8_output_0"
    name: "/state_encoder/conv1/Gather_8"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module/Add_output_0"
    input: "/state_encoder/conv1/Gather_8_output_0"
    output: "/state_encoder/conv1/Gather_9_output_0"
    name: "/state_encoder/conv1/Gather_9"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_attr_dict"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv1/Gather_10_output_0"
    name: "/state_encoder/conv1/Gather_10"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Reshape_1_output_0"
    input: "/state_encoder/conv1/Gather_9_output_0"
    output: "/state_encoder/conv1/Mul_3_output_0"
    name: "/state_encoder/conv1/Mul_3"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv1/Mul_3_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Shape_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv1/aggr_module_1/Constant_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Shape_output_0"
    input: "/state_encoder/conv1/aggr_module_1/Constant_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Gather_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv1/aggr_module_1/Constant_1_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Gather_10_output_0"
    input: "/state_encoder/conv1/aggr_module_1/Constant_1_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Reshape_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/Mul_3_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Shape_1_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Reshape_output_0"
    input: "/state_encoder/conv1/aggr_module_1/Shape_1_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Expand_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_122"
    name: "Constant_86"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/Squeeze_1_output_0"
    input: "onnx::Unsqueeze_122"
    output: "/state_encoder/conv1/aggr_module_1/Unsqueeze_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "onnx::Unsqueeze_124"
    name: "Constant_88"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Gather_output_0"
    input: "onnx::Unsqueeze_124"
    output: "/state_encoder/conv1/aggr_module_1/Unsqueeze_1_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Unsqueeze_output_0"
    input: "/state_encoder/conv1/aggr_module_1/Unsqueeze_1_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Concat_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Concat_output_0"
    output: "/state_encoder/conv1/aggr_module_1/ConstantOfShape_output_0"
    name: "/state_encoder/conv1/aggr_module_1/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/ConstantOfShape_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Shape_2_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Shape_2_output_0"
    output: "/state_encoder/conv1/aggr_module_1/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv1/aggr_module_1/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv1/aggr_module_1/Expand_output_0"
    input: "/state_encoder/conv1/Mul_3_output_0"
    output: "/state_encoder/conv1/aggr_module_1/ScatterElements_output_0"
    name: "/state_encoder/conv1/aggr_module_1/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/ConstantOfShape_output_0"
    input: "/state_encoder/conv1/aggr_module_1/ScatterElements_output_0"
    output: "/state_encoder/conv1/aggr_module_1/Add_output_0"
    name: "/state_encoder/conv1/aggr_module_1/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv1/aggr_module_1/Add_output_0"
    input: "onnx::MatMul_432"
    output: "/state_encoder/conv1/MatMul_1_output_0"
    name: "/state_encoder/conv1/MatMul_1"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv1/Add_1_output_0"
    input: "/state_encoder/conv1/MatMul_1_output_0"
    output: "/state_encoder/conv1/Add_2_output_0"
    name: "/state_encoder/conv1/Add_2"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv1/Add_2_output_0"
    input: "state_encoder.conv1.bias"
    output: "/state_encoder/conv1/Add_3_output_0"
    name: "/state_encoder/conv1/Add_3"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv1/Add_3_output_0"
    output: "/state_encoder/Relu_output_0"
    name: "/state_encoder/Relu"
    op_type: "Relu"
  }
  node {
    input: "edge_index_dict"
    output: "/state_encoder/conv2/Shape_output_0"
    name: "/state_encoder/conv2/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv2/Constant_output_0"
    name: "/state_encoder/conv2/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_1_output_0"
    name: "/state_encoder/conv2/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_2_output_0"
    name: "/state_encoder/conv2/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Shape_output_0"
    input: "/state_encoder/conv2/Constant_1_output_0"
    input: "/state_encoder/conv2/Constant_2_output_0"
    input: "/state_encoder/conv2/Constant_output_0"
    output: "/state_encoder/conv2/Slice_output_0"
    name: "/state_encoder/conv2/Slice"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv2/Constant_3_output_0"
    name: "/state_encoder/conv2/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Slice_output_0"
    input: "/state_encoder/conv2/Constant_3_output_0"
    output: "/state_encoder/conv2/Squeeze_output_0"
    name: "/state_encoder/conv2/Squeeze"
    op_type: "Squeeze"
  }
  node {
    output: "/state_encoder/conv2/Constant_4_output_0"
    name: "/state_encoder/conv2/Constant_4"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 0
        data_type: 1
        raw_data: ""
      }
      type: TENSOR
    }
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv2/Gather_output_0"
    name: "/state_encoder/conv2/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv2/Gather_1_output_0"
    name: "/state_encoder/conv2/Gather_1"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_5_output_0"
    name: "/state_encoder/conv2/Constant_5"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Gather_1_output_0"
    input: "/state_encoder/conv2/Constant_5_output_0"
    output: "/state_encoder/conv2/Reshape_output_0"
    name: "/state_encoder/conv2/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_6_output_0"
    name: "/state_encoder/conv2/Constant_6"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Reshape_output_0"
    input: "/state_encoder/conv2/Constant_6_output_0"
    output: "/state_encoder/conv2/Expand_output_0"
    name: "/state_encoder/conv2/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_151"
    name: "Constant_114"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Squeeze_output_0"
    input: "onnx::Unsqueeze_151"
    output: "/state_encoder/conv2/Unsqueeze_output_0"
    name: "/state_encoder/conv2/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv2/Unsqueeze_output_0"
    output: "/state_encoder/conv2/Concat_output_0"
    name: "/state_encoder/conv2/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Concat_output_0"
    output: "/state_encoder/conv2/ConstantOfShape_output_0"
    name: "/state_encoder/conv2/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/ConstantOfShape_output_0"
    output: "/state_encoder/conv2/Shape_1_output_0"
    name: "/state_encoder/conv2/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/Shape_1_output_0"
    output: "/state_encoder/conv2/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv2/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv2/Expand_output_0"
    input: "/state_encoder/conv2/Constant_4_output_0"
    output: "/state_encoder/conv2/ScatterElements_output_0"
    name: "/state_encoder/conv2/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/ConstantOfShape_output_0"
    input: "/state_encoder/conv2/ScatterElements_output_0"
    output: "/state_encoder/conv2/Add_output_0"
    name: "/state_encoder/conv2/Add"
    op_type: "Add"
  }
  node {
    output: "/state_encoder/conv2/Constant_7_output_0"
    name: "/state_encoder/conv2/Constant_7"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\000\277"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Add_output_0"
    input: "/state_encoder/conv2/Constant_7_output_0"
    output: "/state_encoder/conv2/Pow_output_0"
    name: "/state_encoder/conv2/Pow"
    op_type: "Pow"
  }
  node {
    output: "/state_encoder/conv2/Constant_8_output_0"
    name: "/state_encoder/conv2/Constant_8"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\200\177"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Pow_output_0"
    input: "/state_encoder/conv2/Constant_8_output_0"
    output: "/state_encoder/conv2/Equal_output_0"
    name: "/state_encoder/conv2/Equal"
    op_type: "Equal"
  }
  node {
    input: "/state_encoder/conv2/Equal_output_0"
    output: "/state_encoder/conv2/Cast_output_0"
    name: "/state_encoder/conv2/Cast"
    op_type: "Cast"
    attribute {
      name: "to"
      i: 9
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_9_output_0"
    name: "/state_encoder/conv2/Constant_9"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Cast_output_0"
    input: "/state_encoder/conv2/Constant_9_output_0"
    input: "/state_encoder/conv2/Pow_output_0"
    output: "/state_encoder/conv2/Where_output_0"
    name: "/state_encoder/conv2/Where"
    op_type: "Where"
  }
  node {
    input: "/state_encoder/conv2/Where_output_0"
    input: "/state_encoder/conv2/Gather_output_0"
    output: "/state_encoder/conv2/Gather_2_output_0"
    name: "/state_encoder/conv2/Gather_2"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_10_output_0"
    name: "/state_encoder/conv2/Constant_10"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 0
        data_type: 1
        raw_data: ""
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Gather_2_output_0"
    input: "/state_encoder/conv2/Constant_10_output_0"
    output: "/state_encoder/conv2/Mul_output_0"
    name: "/state_encoder/conv2/Mul"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv2/Where_output_0"
    input: "/state_encoder/conv2/Gather_1_output_0"
    output: "/state_encoder/conv2/Gather_3_output_0"
    name: "/state_encoder/conv2/Gather_3"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Mul_output_0"
    input: "/state_encoder/conv2/Gather_3_output_0"
    output: "/state_encoder/conv2/Mul_1_output_0"
    name: "/state_encoder/conv2/Mul_1"
    op_type: "Mul"
  }
  node {
    input: "edge_index_dict"
    input: "onnx::MatMul_434"
    output: "/state_encoder/conv2/lins.0/MatMul_output_0"
    name: "/state_encoder/conv2/lins.0/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv2/Gather_4_output_0"
    name: "/state_encoder/conv2/Gather_4"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "edge_index_dict"
    input: "/state_encoder/conv2/Gather_4_output_0"
    output: "/state_encoder/conv2/Gather_5_output_0"
    name: "/state_encoder/conv2/Gather_5"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv2/Gather_6_output_0"
    name: "/state_encoder/conv2/Gather_6"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_11_output_0"
    name: "/state_encoder/conv2/Constant_11"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Mul_1_output_0"
    input: "/state_encoder/conv2/Constant_11_output_0"
    output: "/state_encoder/conv2/Reshape_1_output_0"
    name: "/state_encoder/conv2/Reshape_1"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Reshape_1_output_0"
    input: "/state_encoder/conv2/Gather_5_output_0"
    output: "/state_encoder/conv2/Mul_2_output_0"
    name: "/state_encoder/conv2/Mul_2"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv2/Mul_2_output_0"
    output: "/state_encoder/conv2/aggr_module/Shape_output_0"
    name: "/state_encoder/conv2/aggr_module/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv2/aggr_module/Constant_output_0"
    name: "/state_encoder/conv2/aggr_module/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Shape_output_0"
    input: "/state_encoder/conv2/aggr_module/Constant_output_0"
    output: "/state_encoder/conv2/aggr_module/Gather_output_0"
    name: "/state_encoder/conv2/aggr_module/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/aggr_module/Constant_1_output_0"
    name: "/state_encoder/conv2/aggr_module/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Gather_6_output_0"
    input: "/state_encoder/conv2/aggr_module/Constant_1_output_0"
    output: "/state_encoder/conv2/aggr_module/Reshape_output_0"
    name: "/state_encoder/conv2/aggr_module/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Mul_2_output_0"
    output: "/state_encoder/conv2/aggr_module/Shape_1_output_0"
    name: "/state_encoder/conv2/aggr_module/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Reshape_output_0"
    input: "/state_encoder/conv2/aggr_module/Shape_1_output_0"
    output: "/state_encoder/conv2/aggr_module/Expand_output_0"
    name: "/state_encoder/conv2/aggr_module/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_186"
    name: "Constant_148"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Squeeze_output_0"
    input: "onnx::Unsqueeze_186"
    output: "/state_encoder/conv2/aggr_module/Unsqueeze_output_0"
    name: "/state_encoder/conv2/aggr_module/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "onnx::Unsqueeze_188"
    name: "Constant_150"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Gather_output_0"
    input: "onnx::Unsqueeze_188"
    output: "/state_encoder/conv2/aggr_module/Unsqueeze_1_output_0"
    name: "/state_encoder/conv2/aggr_module/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Unsqueeze_output_0"
    input: "/state_encoder/conv2/aggr_module/Unsqueeze_1_output_0"
    output: "/state_encoder/conv2/aggr_module/Concat_output_0"
    name: "/state_encoder/conv2/aggr_module/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Concat_output_0"
    output: "/state_encoder/conv2/aggr_module/ConstantOfShape_output_0"
    name: "/state_encoder/conv2/aggr_module/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/ConstantOfShape_output_0"
    output: "/state_encoder/conv2/aggr_module/Shape_2_output_0"
    name: "/state_encoder/conv2/aggr_module/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Shape_2_output_0"
    output: "/state_encoder/conv2/aggr_module/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv2/aggr_module/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv2/aggr_module/Expand_output_0"
    input: "/state_encoder/conv2/Mul_2_output_0"
    output: "/state_encoder/conv2/aggr_module/ScatterElements_output_0"
    name: "/state_encoder/conv2/aggr_module/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/ConstantOfShape_output_0"
    input: "/state_encoder/conv2/aggr_module/ScatterElements_output_0"
    output: "/state_encoder/conv2/aggr_module/Add_output_0"
    name: "/state_encoder/conv2/aggr_module/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Add_output_0"
    input: "onnx::MatMul_435"
    output: "/state_encoder/conv2/MatMul_output_0"
    name: "/state_encoder/conv2/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv2/lins.0/MatMul_output_0"
    input: "/state_encoder/conv2/MatMul_output_0"
    output: "/state_encoder/conv2/Add_1_output_0"
    name: "/state_encoder/conv2/Add_1"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Add_output_0"
    output: "/state_encoder/conv2/Shape_2_output_0"
    name: "/state_encoder/conv2/Shape_2"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv2/Constant_12_output_0"
    name: "/state_encoder/conv2/Constant_12"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_13_output_0"
    name: "/state_encoder/conv2/Constant_13"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_14_output_0"
    name: "/state_encoder/conv2/Constant_14"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Shape_2_output_0"
    input: "/state_encoder/conv2/Constant_13_output_0"
    input: "/state_encoder/conv2/Constant_14_output_0"
    input: "/state_encoder/conv2/Constant_12_output_0"
    output: "/state_encoder/conv2/Slice_1_output_0"
    name: "/state_encoder/conv2/Slice_1"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv2/Constant_15_output_0"
    name: "/state_encoder/conv2/Constant_15"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Slice_1_output_0"
    input: "/state_encoder/conv2/Constant_15_output_0"
    output: "/state_encoder/conv2/Squeeze_1_output_0"
    name: "/state_encoder/conv2/Squeeze_1"
    op_type: "Squeeze"
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv2/Gather_7_output_0"
    name: "/state_encoder/conv2/Gather_7"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module/Add_output_0"
    input: "/state_encoder/conv2/Gather_7_output_0"
    output: "/state_encoder/conv2/Gather_8_output_0"
    name: "/state_encoder/conv2/Gather_8"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv2/Gather_9_output_0"
    name: "/state_encoder/conv2/Gather_9"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Reshape_1_output_0"
    input: "/state_encoder/conv2/Gather_8_output_0"
    output: "/state_encoder/conv2/Mul_3_output_0"
    name: "/state_encoder/conv2/Mul_3"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv2/Mul_3_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Shape_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv2/aggr_module_1/Constant_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Shape_output_0"
    input: "/state_encoder/conv2/aggr_module_1/Constant_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Gather_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/aggr_module_1/Constant_1_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Gather_9_output_0"
    input: "/state_encoder/conv2/aggr_module_1/Constant_1_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Reshape_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Mul_3_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Shape_1_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Reshape_output_0"
    input: "/state_encoder/conv2/aggr_module_1/Shape_1_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Expand_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_217"
    name: "Constant_178"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Squeeze_1_output_0"
    input: "onnx::Unsqueeze_217"
    output: "/state_encoder/conv2/aggr_module_1/Unsqueeze_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "onnx::Unsqueeze_219"
    name: "Constant_180"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Gather_output_0"
    input: "onnx::Unsqueeze_219"
    output: "/state_encoder/conv2/aggr_module_1/Unsqueeze_1_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Unsqueeze_output_0"
    input: "/state_encoder/conv2/aggr_module_1/Unsqueeze_1_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Concat_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Concat_output_0"
    output: "/state_encoder/conv2/aggr_module_1/ConstantOfShape_output_0"
    name: "/state_encoder/conv2/aggr_module_1/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/ConstantOfShape_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Shape_2_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Shape_2_output_0"
    output: "/state_encoder/conv2/aggr_module_1/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv2/aggr_module_1/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv2/aggr_module_1/Expand_output_0"
    input: "/state_encoder/conv2/Mul_3_output_0"
    output: "/state_encoder/conv2/aggr_module_1/ScatterElements_output_0"
    name: "/state_encoder/conv2/aggr_module_1/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/ConstantOfShape_output_0"
    input: "/state_encoder/conv2/aggr_module_1/ScatterElements_output_0"
    output: "/state_encoder/conv2/aggr_module_1/Add_output_0"
    name: "/state_encoder/conv2/aggr_module_1/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Add_output_0"
    input: "onnx::MatMul_436"
    output: "/state_encoder/conv2/MatMul_1_output_0"
    name: "/state_encoder/conv2/MatMul_1"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv2/Add_1_output_0"
    input: "/state_encoder/conv2/MatMul_1_output_0"
    output: "/state_encoder/conv2/Add_2_output_0"
    name: "/state_encoder/conv2/Add_2"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Add_output_0"
    output: "/state_encoder/conv2/Shape_3_output_0"
    name: "/state_encoder/conv2/Shape_3"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv2/Constant_16_output_0"
    name: "/state_encoder/conv2/Constant_16"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_17_output_0"
    name: "/state_encoder/conv2/Constant_17"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv2/Constant_18_output_0"
    name: "/state_encoder/conv2/Constant_18"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Shape_3_output_0"
    input: "/state_encoder/conv2/Constant_17_output_0"
    input: "/state_encoder/conv2/Constant_18_output_0"
    input: "/state_encoder/conv2/Constant_16_output_0"
    output: "/state_encoder/conv2/Slice_2_output_0"
    name: "/state_encoder/conv2/Slice_2"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv2/Constant_19_output_0"
    name: "/state_encoder/conv2/Constant_19"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Slice_2_output_0"
    input: "/state_encoder/conv2/Constant_19_output_0"
    output: "/state_encoder/conv2/Squeeze_2_output_0"
    name: "/state_encoder/conv2/Squeeze_2"
    op_type: "Squeeze"
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv2/Gather_10_output_0"
    name: "/state_encoder/conv2/Gather_10"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_1/Add_output_0"
    input: "/state_encoder/conv2/Gather_10_output_0"
    output: "/state_encoder/conv2/Gather_11_output_0"
    name: "/state_encoder/conv2/Gather_11"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index.3"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv2/Gather_12_output_0"
    name: "/state_encoder/conv2/Gather_12"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Reshape_1_output_0"
    input: "/state_encoder/conv2/Gather_11_output_0"
    output: "/state_encoder/conv2/Mul_4_output_0"
    name: "/state_encoder/conv2/Mul_4"
    op_type: "Mul"
  }
  node {
    input: "/state_encoder/conv2/Mul_4_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Shape_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv2/aggr_module_2/Constant_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 7
        raw_data: "\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Shape_output_0"
    input: "/state_encoder/conv2/aggr_module_2/Constant_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Gather_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv2/aggr_module_2/Constant_1_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Gather_12_output_0"
    input: "/state_encoder/conv2/aggr_module_2/Constant_1_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Reshape_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/Mul_4_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Shape_1_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Reshape_output_0"
    input: "/state_encoder/conv2/aggr_module_2/Shape_1_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Expand_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_248"
    name: "Constant_208"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/Squeeze_2_output_0"
    input: "onnx::Unsqueeze_248"
    output: "/state_encoder/conv2/aggr_module_2/Unsqueeze_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "onnx::Unsqueeze_250"
    name: "Constant_210"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Gather_output_0"
    input: "onnx::Unsqueeze_250"
    output: "/state_encoder/conv2/aggr_module_2/Unsqueeze_1_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Unsqueeze_output_0"
    input: "/state_encoder/conv2/aggr_module_2/Unsqueeze_1_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Concat_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Concat_output_0"
    output: "/state_encoder/conv2/aggr_module_2/ConstantOfShape_output_0"
    name: "/state_encoder/conv2/aggr_module_2/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/ConstantOfShape_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Shape_2_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Shape_2_output_0"
    output: "/state_encoder/conv2/aggr_module_2/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv2/aggr_module_2/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv2/aggr_module_2/Expand_output_0"
    input: "/state_encoder/conv2/Mul_4_output_0"
    output: "/state_encoder/conv2/aggr_module_2/ScatterElements_output_0"
    name: "/state_encoder/conv2/aggr_module_2/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/ConstantOfShape_output_0"
    input: "/state_encoder/conv2/aggr_module_2/ScatterElements_output_0"
    output: "/state_encoder/conv2/aggr_module_2/Add_output_0"
    name: "/state_encoder/conv2/aggr_module_2/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/aggr_module_2/Add_output_0"
    input: "onnx::MatMul_437"
    output: "/state_encoder/conv2/MatMul_2_output_0"
    name: "/state_encoder/conv2/MatMul_2"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv2/Add_2_output_0"
    input: "/state_encoder/conv2/MatMul_2_output_0"
    output: "/state_encoder/conv2/Add_3_output_0"
    name: "/state_encoder/conv2/Add_3"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/Add_3_output_0"
    input: "state_encoder.conv2.bias"
    output: "/state_encoder/conv2/Add_4_output_0"
    name: "/state_encoder/conv2/Add_4"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv2/Add_4_output_0"
    output: "/state_encoder/Relu_1_output_0"
    name: "/state_encoder/Relu_1"
    op_type: "Relu"
  }
  node {
    input: "/state_encoder/Relu_1_output_0"
    output: "/state_encoder/conv3/Shape_output_0"
    name: "/state_encoder/conv3/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv3/Constant_output_0"
    name: "/state_encoder/conv3/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv3/Constant_1_output_0"
    name: "/state_encoder/conv3/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv3/Constant_2_output_0"
    name: "/state_encoder/conv3/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/Shape_output_0"
    input: "/state_encoder/conv3/Constant_1_output_0"
    input: "/state_encoder/conv3/Constant_2_output_0"
    input: "/state_encoder/conv3/Constant_output_0"
    output: "/state_encoder/conv3/Slice_output_0"
    name: "/state_encoder/conv3/Slice"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv3/Constant_3_output_0"
    name: "/state_encoder/conv3/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/Slice_output_0"
    input: "/state_encoder/conv3/Constant_3_output_0"
    output: "/state_encoder/conv3/Squeeze_output_0"
    name: "/state_encoder/conv3/Squeeze"
    op_type: "Squeeze"
  }
  node {
    input: "edge_index.5"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv3/Gather_output_0"
    name: "/state_encoder/conv3/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_output_0"
    input: "/state_encoder/conv3/Gather_output_0"
    output: "/state_encoder/conv3/Gather_1_output_0"
    name: "/state_encoder/conv3/Gather_1"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index.5"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv3/Gather_2_output_0"
    name: "/state_encoder/conv3/Gather_2"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv3/Constant_4_output_0"
    name: "/state_encoder/conv3/Constant_4"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "onnx::Reshape_9"
    input: "/state_encoder/conv3/Constant_4_output_0"
    output: "/state_encoder/conv3/Reshape_output_0"
    name: "/state_encoder/conv3/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv3/Reshape_output_0"
    output: "/state_encoder/conv3/Cast_output_0"
    name: "/state_encoder/conv3/Cast"
    op_type: "Cast"
    attribute {
      name: "to"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv3/Cast_output_0"
    input: "/state_encoder/conv3/Gather_1_output_0"
    output: "/state_encoder/conv3/Mul_output_0"
    name: "/state_encoder/conv3/Mul"
    op_type: "Mul"
  }
  node {
    output: "/state_encoder/conv3/aggr_module/Constant_output_0"
    name: "/state_encoder/conv3/aggr_module/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/Gather_2_output_0"
    input: "/state_encoder/conv3/aggr_module/Constant_output_0"
    output: "/state_encoder/conv3/aggr_module/Reshape_output_0"
    name: "/state_encoder/conv3/aggr_module/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv3/Mul_output_0"
    output: "/state_encoder/conv3/aggr_module/Shape_output_0"
    name: "/state_encoder/conv3/aggr_module/Shape"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv3/aggr_module/Reshape_output_0"
    input: "/state_encoder/conv3/aggr_module/Shape_output_0"
    output: "/state_encoder/conv3/aggr_module/Expand_output_0"
    name: "/state_encoder/conv3/aggr_module/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_282"
    name: "Constant_240"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/Squeeze_output_0"
    input: "onnx::Unsqueeze_282"
    output: "/state_encoder/conv3/aggr_module/Unsqueeze_output_0"
    name: "/state_encoder/conv3/aggr_module/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "/state_encoder/conv3/aggr_module/Constant_1_output_0"
    name: "/state_encoder/conv3/aggr_module/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: " \000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/aggr_module/Unsqueeze_output_0"
    input: "/state_encoder/conv3/aggr_module/Constant_1_output_0"
    output: "/state_encoder/conv3/aggr_module/Concat_output_0"
    name: "/state_encoder/conv3/aggr_module/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv3/aggr_module/Concat_output_0"
    output: "/state_encoder/conv3/aggr_module/ConstantOfShape_output_0"
    name: "/state_encoder/conv3/aggr_module/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/aggr_module/ConstantOfShape_output_0"
    output: "/state_encoder/conv3/aggr_module/Shape_1_output_0"
    name: "/state_encoder/conv3/aggr_module/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv3/aggr_module/Shape_1_output_0"
    output: "/state_encoder/conv3/aggr_module/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv3/aggr_module/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv3/aggr_module/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv3/aggr_module/Expand_output_0"
    input: "/state_encoder/conv3/Mul_output_0"
    output: "/state_encoder/conv3/aggr_module/ScatterElements_output_0"
    name: "/state_encoder/conv3/aggr_module/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv3/aggr_module/ConstantOfShape_output_0"
    input: "/state_encoder/conv3/aggr_module/ScatterElements_output_0"
    output: "/state_encoder/conv3/aggr_module/Add_output_0"
    name: "/state_encoder/conv3/aggr_module/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv3/aggr_module/Add_output_0"
    input: "state_encoder.conv3.lin_rel.weight"
    input: "state_encoder.conv3.lin_rel.bias"
    output: "/state_encoder/conv3/lin_rel/Gemm_output_0"
    name: "/state_encoder/conv3/lin_rel/Gemm"
    op_type: "Gemm"
    attribute {
      name: "alpha"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "beta"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "transB"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_1_output_0"
    input: "onnx::MatMul_439"
    output: "/state_encoder/conv3/lin_root/MatMul_output_0"
    name: "/state_encoder/conv3/lin_root/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv3/lin_rel/Gemm_output_0"
    input: "/state_encoder/conv3/lin_root/MatMul_output_0"
    output: "/state_encoder/conv3/Add_output_0"
    name: "/state_encoder/conv3/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv3/Add_output_0"
    output: "/state_encoder/Relu_2_output_0"
    name: "/state_encoder/Relu_2"
    op_type: "Relu"
  }
  node {
    input: "/state_encoder/Relu_2_output_0"
    output: "/state_encoder/conv32/Shape_output_0"
    name: "/state_encoder/conv32/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv32/Constant_output_0"
    name: "/state_encoder/conv32/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv32/Constant_1_output_0"
    name: "/state_encoder/conv32/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv32/Constant_2_output_0"
    name: "/state_encoder/conv32/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/Shape_output_0"
    input: "/state_encoder/conv32/Constant_1_output_0"
    input: "/state_encoder/conv32/Constant_2_output_0"
    input: "/state_encoder/conv32/Constant_output_0"
    output: "/state_encoder/conv32/Slice_output_0"
    name: "/state_encoder/conv32/Slice"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv32/Constant_3_output_0"
    name: "/state_encoder/conv32/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/Slice_output_0"
    input: "/state_encoder/conv32/Constant_3_output_0"
    output: "/state_encoder/conv32/Squeeze_output_0"
    name: "/state_encoder/conv32/Squeeze"
    op_type: "Squeeze"
  }
  node {
    input: "edge_index.5"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv32/Gather_output_0"
    name: "/state_encoder/conv32/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_output_0"
    input: "/state_encoder/conv32/Gather_output_0"
    output: "/state_encoder/conv32/Gather_1_output_0"
    name: "/state_encoder/conv32/Gather_1"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index.5"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv32/Gather_2_output_0"
    name: "/state_encoder/conv32/Gather_2"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv32/Constant_4_output_0"
    name: "/state_encoder/conv32/Constant_4"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "onnx::Reshape_9"
    input: "/state_encoder/conv32/Constant_4_output_0"
    output: "/state_encoder/conv32/Reshape_output_0"
    name: "/state_encoder/conv32/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv32/Reshape_output_0"
    output: "/state_encoder/conv32/Cast_output_0"
    name: "/state_encoder/conv32/Cast"
    op_type: "Cast"
    attribute {
      name: "to"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv32/Cast_output_0"
    input: "/state_encoder/conv32/Gather_1_output_0"
    output: "/state_encoder/conv32/Mul_output_0"
    name: "/state_encoder/conv32/Mul"
    op_type: "Mul"
  }
  node {
    output: "/state_encoder/conv32/aggr_module/Constant_output_0"
    name: "/state_encoder/conv32/aggr_module/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/Gather_2_output_0"
    input: "/state_encoder/conv32/aggr_module/Constant_output_0"
    output: "/state_encoder/conv32/aggr_module/Reshape_output_0"
    name: "/state_encoder/conv32/aggr_module/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv32/Mul_output_0"
    output: "/state_encoder/conv32/aggr_module/Shape_output_0"
    name: "/state_encoder/conv32/aggr_module/Shape"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv32/aggr_module/Reshape_output_0"
    input: "/state_encoder/conv32/aggr_module/Shape_output_0"
    output: "/state_encoder/conv32/aggr_module/Expand_output_0"
    name: "/state_encoder/conv32/aggr_module/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_316"
    name: "Constant_271"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/Squeeze_output_0"
    input: "onnx::Unsqueeze_316"
    output: "/state_encoder/conv32/aggr_module/Unsqueeze_output_0"
    name: "/state_encoder/conv32/aggr_module/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    output: "/state_encoder/conv32/aggr_module/Constant_1_output_0"
    name: "/state_encoder/conv32/aggr_module/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: " \000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/aggr_module/Unsqueeze_output_0"
    input: "/state_encoder/conv32/aggr_module/Constant_1_output_0"
    output: "/state_encoder/conv32/aggr_module/Concat_output_0"
    name: "/state_encoder/conv32/aggr_module/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv32/aggr_module/Concat_output_0"
    output: "/state_encoder/conv32/aggr_module/ConstantOfShape_output_0"
    name: "/state_encoder/conv32/aggr_module/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/aggr_module/ConstantOfShape_output_0"
    output: "/state_encoder/conv32/aggr_module/Shape_1_output_0"
    name: "/state_encoder/conv32/aggr_module/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv32/aggr_module/Shape_1_output_0"
    output: "/state_encoder/conv32/aggr_module/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv32/aggr_module/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv32/aggr_module/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv32/aggr_module/Expand_output_0"
    input: "/state_encoder/conv32/Mul_output_0"
    output: "/state_encoder/conv32/aggr_module/ScatterElements_output_0"
    name: "/state_encoder/conv32/aggr_module/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv32/aggr_module/ConstantOfShape_output_0"
    input: "/state_encoder/conv32/aggr_module/ScatterElements_output_0"
    output: "/state_encoder/conv32/aggr_module/Add_output_0"
    name: "/state_encoder/conv32/aggr_module/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv32/aggr_module/Add_output_0"
    input: "state_encoder.conv32.lin_rel.weight"
    input: "state_encoder.conv32.lin_rel.bias"
    output: "/state_encoder/conv32/lin_rel/Gemm_output_0"
    name: "/state_encoder/conv32/lin_rel/Gemm"
    op_type: "Gemm"
    attribute {
      name: "alpha"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "beta"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "transB"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_2_output_0"
    input: "onnx::MatMul_441"
    output: "/state_encoder/conv32/lin_root/MatMul_output_0"
    name: "/state_encoder/conv32/lin_root/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv32/lin_rel/Gemm_output_0"
    input: "/state_encoder/conv32/lin_root/MatMul_output_0"
    output: "/state_encoder/conv32/Add_output_0"
    name: "/state_encoder/conv32/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv32/Add_output_0"
    output: "/state_encoder/Relu_3_output_0"
    name: "/state_encoder/Relu_3"
    op_type: "Relu"
  }
  node {
    input: "/state_encoder/Relu_3_output_0"
    output: "/state_encoder/conv4/Shape_output_0"
    name: "/state_encoder/conv4/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv4/Constant_output_0"
    name: "/state_encoder/conv4/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv4/Constant_1_output_0"
    name: "/state_encoder/conv4/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv4/Constant_2_output_0"
    name: "/state_encoder/conv4/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/Shape_output_0"
    input: "/state_encoder/conv4/Constant_1_output_0"
    input: "/state_encoder/conv4/Constant_2_output_0"
    input: "/state_encoder/conv4/Constant_output_0"
    output: "/state_encoder/conv4/Slice_output_0"
    name: "/state_encoder/conv4/Slice"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv4/Constant_3_output_0"
    name: "/state_encoder/conv4/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/Slice_output_0"
    input: "/state_encoder/conv4/Constant_3_output_0"
    output: "/state_encoder/conv4/Squeeze_output_0"
    name: "/state_encoder/conv4/Squeeze"
    op_type: "Squeeze"
  }
  node {
    input: "edge_index"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv4/Gather_output_0"
    name: "/state_encoder/conv4/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_output_0"
    input: "/state_encoder/conv4/Gather_output_0"
    output: "/state_encoder/conv4/Gather_1_output_0"
    name: "/state_encoder/conv4/Gather_1"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv4/Gather_2_output_0"
    name: "/state_encoder/conv4/Gather_2"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "onnx::Unsqueeze_342"
    name: "Constant_294"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/Squeeze_output_0"
    input: "onnx::Unsqueeze_342"
    output: "/state_encoder/conv4/aggr_module/Unsqueeze_output_0"
    name: "/state_encoder/conv4/aggr_module/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Unsqueeze_output_0"
    output: "/state_encoder/conv4/aggr_module/Concat_output_0"
    name: "/state_encoder/conv4/aggr_module/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv4/aggr_module/Constant_output_0"
    name: "/state_encoder/conv4/aggr_module/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\200?"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Concat_output_0"
    output: "/state_encoder/conv4/aggr_module/ConstantOfShape_output_0"
    name: "/state_encoder/conv4/aggr_module/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/ConstantOfShape_output_0"
    output: "/state_encoder/conv4/aggr_module/Shape_output_0"
    name: "/state_encoder/conv4/aggr_module/Shape"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Shape_output_0"
    output: "/state_encoder/conv4/aggr_module/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv4/aggr_module/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv4/Gather_2_output_0"
    input: "/state_encoder/conv4/aggr_module/Constant_output_0"
    output: "/state_encoder/conv4/aggr_module/ScatterElements_output_0"
    name: "/state_encoder/conv4/aggr_module/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/ConstantOfShape_output_0"
    input: "/state_encoder/conv4/aggr_module/ScatterElements_output_0"
    output: "/state_encoder/conv4/aggr_module/Add_output_0"
    name: "/state_encoder/conv4/aggr_module/Add"
    op_type: "Add"
  }
  node {
    output: "/state_encoder/conv4/aggr_module/Constant_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\200?"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Add_output_0"
    input: "/state_encoder/conv4/aggr_module/Constant_1_output_0"
    input: ""
    output: "/state_encoder/conv4/aggr_module/Clip_output_0"
    name: "/state_encoder/conv4/aggr_module/Clip"
    op_type: "Clip"
  }
  node {
    output: "/state_encoder/conv4/aggr_module/Constant_2_output_0"
    name: "/state_encoder/conv4/aggr_module/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/Gather_2_output_0"
    input: "/state_encoder/conv4/aggr_module/Constant_2_output_0"
    output: "/state_encoder/conv4/aggr_module/Reshape_output_0"
    name: "/state_encoder/conv4/aggr_module/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv4/Gather_1_output_0"
    output: "/state_encoder/conv4/aggr_module/Shape_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Reshape_output_0"
    input: "/state_encoder/conv4/aggr_module/Shape_1_output_0"
    output: "/state_encoder/conv4/aggr_module/Expand_output_0"
    name: "/state_encoder/conv4/aggr_module/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_359"
    name: "Constant_309"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/Squeeze_output_0"
    input: "onnx::Unsqueeze_359"
    output: "/state_encoder/conv4/aggr_module/Unsqueeze_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    output: "/state_encoder/conv4/aggr_module/Constant_3_output_0"
    name: "/state_encoder/conv4/aggr_module/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: " \000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Unsqueeze_1_output_0"
    input: "/state_encoder/conv4/aggr_module/Constant_3_output_0"
    output: "/state_encoder/conv4/aggr_module/Concat_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Concat_1"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Concat_1_output_0"
    output: "/state_encoder/conv4/aggr_module/ConstantOfShape_2_output_0"
    name: "/state_encoder/conv4/aggr_module/ConstantOfShape_2"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/ConstantOfShape_2_output_0"
    output: "/state_encoder/conv4/aggr_module/Shape_2_output_0"
    name: "/state_encoder/conv4/aggr_module/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Shape_2_output_0"
    output: "/state_encoder/conv4/aggr_module/ConstantOfShape_3_output_0"
    name: "/state_encoder/conv4/aggr_module/ConstantOfShape_3"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/ConstantOfShape_3_output_0"
    input: "/state_encoder/conv4/aggr_module/Expand_output_0"
    input: "/state_encoder/conv4/Gather_1_output_0"
    output: "/state_encoder/conv4/aggr_module/ScatterElements_1_output_0"
    name: "/state_encoder/conv4/aggr_module/ScatterElements_1"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/ConstantOfShape_2_output_0"
    input: "/state_encoder/conv4/aggr_module/ScatterElements_1_output_0"
    output: "/state_encoder/conv4/aggr_module/Add_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Add_1"
    op_type: "Add"
  }
  node {
    output: "/state_encoder/conv4/aggr_module/Constant_4_output_0"
    name: "/state_encoder/conv4/aggr_module/Constant_4"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Clip_output_0"
    input: "/state_encoder/conv4/aggr_module/Constant_4_output_0"
    output: "/state_encoder/conv4/aggr_module/Reshape_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Reshape_1"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Add_1_output_0"
    output: "/state_encoder/conv4/aggr_module/Shape_3_output_0"
    name: "/state_encoder/conv4/aggr_module/Shape_3"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Reshape_1_output_0"
    input: "/state_encoder/conv4/aggr_module/Shape_3_output_0"
    output: "/state_encoder/conv4/aggr_module/Expand_1_output_0"
    name: "/state_encoder/conv4/aggr_module/Expand_1"
    op_type: "Expand"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Add_1_output_0"
    input: "/state_encoder/conv4/aggr_module/Expand_1_output_0"
    output: "/state_encoder/conv4/aggr_module/Div_output_0"
    name: "/state_encoder/conv4/aggr_module/Div"
    op_type: "Div"
  }
  node {
    input: "/state_encoder/conv4/aggr_module/Div_output_0"
    input: "state_encoder.conv4.lin_l.weight"
    input: "state_encoder.conv4.lin_l.bias"
    output: "/state_encoder/conv4/lin_l/Gemm_output_0"
    name: "/state_encoder/conv4/lin_l/Gemm"
    op_type: "Gemm"
    attribute {
      name: "alpha"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "beta"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "transB"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_3_output_0"
    input: "onnx::MatMul_445"
    output: "/state_encoder/conv4/lin_r/MatMul_output_0"
    name: "/state_encoder/conv4/lin_r/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv4/lin_l/Gemm_output_0"
    input: "/state_encoder/conv4/lin_r/MatMul_output_0"
    output: "/state_encoder/conv4/Add_output_0"
    name: "/state_encoder/conv4/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv4/Add_output_0"
    output: "/state_encoder/Relu_4_output_0"
    name: "/state_encoder/Relu_4"
    op_type: "Relu"
  }
  node {
    input: "/state_encoder/Relu_4_output_0"
    output: "/state_encoder/conv42/Shape_output_0"
    name: "/state_encoder/conv42/Shape"
    op_type: "Shape"
  }
  node {
    output: "/state_encoder/conv42/Constant_output_0"
    name: "/state_encoder/conv42/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv42/Constant_1_output_0"
    name: "/state_encoder/conv42/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\376\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    output: "/state_encoder/conv42/Constant_2_output_0"
    name: "/state_encoder/conv42/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/Shape_output_0"
    input: "/state_encoder/conv42/Constant_1_output_0"
    input: "/state_encoder/conv42/Constant_2_output_0"
    input: "/state_encoder/conv42/Constant_output_0"
    output: "/state_encoder/conv42/Slice_output_0"
    name: "/state_encoder/conv42/Slice"
    op_type: "Slice"
  }
  node {
    output: "/state_encoder/conv42/Constant_3_output_0"
    name: "/state_encoder/conv42/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/Slice_output_0"
    input: "/state_encoder/conv42/Constant_3_output_0"
    output: "/state_encoder/conv42/Squeeze_output_0"
    name: "/state_encoder/conv42/Squeeze"
    op_type: "Squeeze"
  }
  node {
    input: "edge_index"
    input: "/state_encoder/conv1/Constant_6_output_0"
    output: "/state_encoder/conv42/Gather_output_0"
    name: "/state_encoder/conv42/Gather"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_output_0"
    input: "/state_encoder/conv42/Gather_output_0"
    output: "/state_encoder/conv42/Gather_1_output_0"
    name: "/state_encoder/conv42/Gather_1"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: -2
      type: INT
    }
  }
  node {
    input: "edge_index"
    input: "/state_encoder/conv1/Constant_4_output_0"
    output: "/state_encoder/conv42/Gather_2_output_0"
    name: "/state_encoder/conv42/Gather_2"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "onnx::Unsqueeze_390"
    name: "Constant_337"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/Squeeze_output_0"
    input: "onnx::Unsqueeze_390"
    output: "/state_encoder/conv42/aggr_module/Unsqueeze_output_0"
    name: "/state_encoder/conv42/aggr_module/Unsqueeze"
    op_type: "Unsqueeze"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Unsqueeze_output_0"
    output: "/state_encoder/conv42/aggr_module/Concat_output_0"
    name: "/state_encoder/conv42/aggr_module/Concat"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    output: "/state_encoder/conv42/aggr_module/Constant_output_0"
    name: "/state_encoder/conv42/aggr_module/Constant"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\200?"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Concat_output_0"
    output: "/state_encoder/conv42/aggr_module/ConstantOfShape_output_0"
    name: "/state_encoder/conv42/aggr_module/ConstantOfShape"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/ConstantOfShape_output_0"
    output: "/state_encoder/conv42/aggr_module/Shape_output_0"
    name: "/state_encoder/conv42/aggr_module/Shape"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Shape_output_0"
    output: "/state_encoder/conv42/aggr_module/ConstantOfShape_1_output_0"
    name: "/state_encoder/conv42/aggr_module/ConstantOfShape_1"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/ConstantOfShape_1_output_0"
    input: "/state_encoder/conv42/Gather_2_output_0"
    input: "/state_encoder/conv42/aggr_module/Constant_output_0"
    output: "/state_encoder/conv42/aggr_module/ScatterElements_output_0"
    name: "/state_encoder/conv42/aggr_module/ScatterElements"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/ConstantOfShape_output_0"
    input: "/state_encoder/conv42/aggr_module/ScatterElements_output_0"
    output: "/state_encoder/conv42/aggr_module/Add_output_0"
    name: "/state_encoder/conv42/aggr_module/Add"
    op_type: "Add"
  }
  node {
    output: "/state_encoder/conv42/aggr_module/Constant_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Constant_1"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        data_type: 1
        raw_data: "\000\000\200?"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Add_output_0"
    input: "/state_encoder/conv42/aggr_module/Constant_1_output_0"
    input: ""
    output: "/state_encoder/conv42/aggr_module/Clip_output_0"
    name: "/state_encoder/conv42/aggr_module/Clip"
    op_type: "Clip"
  }
  node {
    output: "/state_encoder/conv42/aggr_module/Constant_2_output_0"
    name: "/state_encoder/conv42/aggr_module/Constant_2"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/Gather_2_output_0"
    input: "/state_encoder/conv42/aggr_module/Constant_2_output_0"
    output: "/state_encoder/conv42/aggr_module/Reshape_output_0"
    name: "/state_encoder/conv42/aggr_module/Reshape"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv42/Gather_1_output_0"
    output: "/state_encoder/conv42/aggr_module/Shape_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Shape_1"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Reshape_output_0"
    input: "/state_encoder/conv42/aggr_module/Shape_1_output_0"
    output: "/state_encoder/conv42/aggr_module/Expand_output_0"
    name: "/state_encoder/conv42/aggr_module/Expand"
    op_type: "Expand"
  }
  node {
    output: "onnx::Unsqueeze_407"
    name: "Constant_352"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: "\000\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/Squeeze_output_0"
    input: "onnx::Unsqueeze_407"
    output: "/state_encoder/conv42/aggr_module/Unsqueeze_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Unsqueeze_1"
    op_type: "Unsqueeze"
  }
  node {
    output: "/state_encoder/conv42/aggr_module/Constant_3_output_0"
    name: "/state_encoder/conv42/aggr_module/Constant_3"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 7
        raw_data: " \000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Unsqueeze_1_output_0"
    input: "/state_encoder/conv42/aggr_module/Constant_3_output_0"
    output: "/state_encoder/conv42/aggr_module/Concat_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Concat_1"
    op_type: "Concat"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Concat_1_output_0"
    output: "/state_encoder/conv42/aggr_module/ConstantOfShape_2_output_0"
    name: "/state_encoder/conv42/aggr_module/ConstantOfShape_2"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/ConstantOfShape_2_output_0"
    output: "/state_encoder/conv42/aggr_module/Shape_2_output_0"
    name: "/state_encoder/conv42/aggr_module/Shape_2"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Shape_2_output_0"
    output: "/state_encoder/conv42/aggr_module/ConstantOfShape_3_output_0"
    name: "/state_encoder/conv42/aggr_module/ConstantOfShape_3"
    op_type: "ConstantOfShape"
    attribute {
      name: "value"
      t {
        dims: 1
        data_type: 1
        raw_data: "\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/ConstantOfShape_3_output_0"
    input: "/state_encoder/conv42/aggr_module/Expand_output_0"
    input: "/state_encoder/conv42/Gather_1_output_0"
    output: "/state_encoder/conv42/aggr_module/ScatterElements_1_output_0"
    name: "/state_encoder/conv42/aggr_module/ScatterElements_1"
    op_type: "ScatterElements"
    attribute {
      name: "axis"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/ConstantOfShape_2_output_0"
    input: "/state_encoder/conv42/aggr_module/ScatterElements_1_output_0"
    output: "/state_encoder/conv42/aggr_module/Add_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Add_1"
    op_type: "Add"
  }
  node {
    output: "/state_encoder/conv42/aggr_module/Constant_4_output_0"
    name: "/state_encoder/conv42/aggr_module/Constant_4"
    op_type: "Constant"
    attribute {
      name: "value"
      t {
        dims: 2
        data_type: 7
        raw_data: "\377\377\377\377\377\377\377\377\001\000\000\000\000\000\000\000"
      }
      type: TENSOR
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Clip_output_0"
    input: "/state_encoder/conv42/aggr_module/Constant_4_output_0"
    output: "/state_encoder/conv42/aggr_module/Reshape_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Reshape_1"
    op_type: "Reshape"
    attribute {
      name: "allowzero"
      i: 0
      type: INT
    }
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Add_1_output_0"
    output: "/state_encoder/conv42/aggr_module/Shape_3_output_0"
    name: "/state_encoder/conv42/aggr_module/Shape_3"
    op_type: "Shape"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Reshape_1_output_0"
    input: "/state_encoder/conv42/aggr_module/Shape_3_output_0"
    output: "/state_encoder/conv42/aggr_module/Expand_1_output_0"
    name: "/state_encoder/conv42/aggr_module/Expand_1"
    op_type: "Expand"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Add_1_output_0"
    input: "/state_encoder/conv42/aggr_module/Expand_1_output_0"
    output: "/state_encoder/conv42/aggr_module/Div_output_0"
    name: "/state_encoder/conv42/aggr_module/Div"
    op_type: "Div"
  }
  node {
    input: "/state_encoder/conv42/aggr_module/Div_output_0"
    input: "state_encoder.conv42.lin_l.weight"
    input: "state_encoder.conv42.lin_l.bias"
    output: "/state_encoder/conv42/lin_l/Gemm_output_0"
    name: "/state_encoder/conv42/lin_l/Gemm"
    op_type: "Gemm"
    attribute {
      name: "alpha"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "beta"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "transB"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/Relu_4_output_0"
    input: "onnx::MatMul_449"
    output: "/state_encoder/conv42/lin_r/MatMul_output_0"
    name: "/state_encoder/conv42/lin_r/MatMul"
    op_type: "MatMul"
  }
  node {
    input: "/state_encoder/conv42/lin_l/Gemm_output_0"
    input: "/state_encoder/conv42/lin_r/MatMul_output_0"
    output: "/state_encoder/conv42/Add_output_0"
    name: "/state_encoder/conv42/Add"
    op_type: "Add"
  }
  node {
    input: "/state_encoder/conv42/Add_output_0"
    output: "/state_encoder/Relu_5_output_0"
    name: "/state_encoder/Relu_5"
    op_type: "Relu"
  }
  node {
    input: "/state_encoder/Relu_5_output_0"
    input: "state_encoder.lin.weight"
    input: "state_encoder.lin.bias"
    output: "/state_encoder/lin/Gemm_output_0"
    name: "/state_encoder/lin/Gemm"
    op_type: "Gemm"
    attribute {
      name: "alpha"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "beta"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "transB"
      i: 1
      type: INT
    }
  }
  node {
    input: "/state_encoder/lin/Gemm_output_0"
    input: "state_encoder.lin_last.weight"
    input: "state_encoder.lin_last.bias"
    output: "out"
    name: "/state_encoder/lin_last/Gemm"
    op_type: "Gemm"
    attribute {
      name: "alpha"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "beta"
      f: 1.0
      type: FLOAT
    }
    attribute {
      name: "transB"
      i: 1
      type: INT
    }
  }
  node {
    input: "x_dict"
    output: "other_out"
    name: "Identity_372"
    op_type: "Identity"
  }
  name: "torch_jit"
  initializer {
    dims: 32
    data_type: 1
    name: "state_encoder.conv1.bias"
    raw_data
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "state_encoder.conv3.lin_rel.weight"
    raw_data: "\035%\033>,\316\375\275\"\275\326\275-v(\276\364\271\013=C*\'\276z\004\232=9\215\032>\313\315\036>\260\321\334\274.\310\253=\220!\321<\300\235%\273\002*\001\276\004\207|=\263\235+>w\335%\276.A\016\276\230E\365<U\361\314\275\314\231\217=\274\r\374\275\200\334\246\273\034Y\330\2750\277\016<W-\007>\000\301\007\273\200p0\273\230\\\335\274\2718\030>\215\0324>@A\226\273\320\225y<\354\261J=\210{8\275\376)o\275\227\275/\276\310\003\317<v\307\316=\246\r\317=\r\363\005>\346\006\252=\000O\204<\255\2634\276\204\207h\275\200$F\2744m}=\322\374\347= \366(\276@\rc\273b\025\256\275z\340\215=\300s\020<\342D\364=\300\227\033\276\214\'T\275\010\024\256<\302\355\351\275]#/\276\325\276\026>/\301\007>\214\262%\275h\313\330\274\260\005&<dV\326\275\220\202`=}\352\022>)>!>\300k\006=\376\256\351=d\331,\275\314\320%=w\321)\276\000,\356<Q\224\023>\272\0140\276\030/P\275a;\n\276\002w\243=b\250\014\276\322]\305=\264\377\210=vt\231=*w\022\276B\351\344=\024\007o\275\274\237X\275\347\315\032>\335W*>\006\271\246=\240\266\024\274WF\330\275\235\272\336\275\\K\021\275\256\240\352=\364Z1=\177\274\232\275?\337\037>\224\265\207=\212\256\347=\324\332\025\276\340\222a<\356t\254=\227?0>%7\006>&\201\306=B#\276=\031\263\006>\362\356\244=`6\267;\230\300X=qJ,\276\\\374K\275h\3151\275L\270]=.\355\372\275c\213\335\275t\342\345\2750\241)<\034\376\032=iL\213\275j1\347=\217m4>\222\303\221\275X\211\203\274\0149\217=\256%\035\276\213e%>\356_\263=}\346-\276!\325\t>s\345\031\276g\265\000>\222\266\377=\375\214\013>\342\020\215\275\020\374\010<\016\205\005\276\370\306\243\275\215\t&\276\000\341\213\2748\234~=\370g\t=8wz=;a\353\275\336\337\363=\220Q\204<b\235\314=\234\266\031\275\000\327\023<\014\277A\2755\373\317\275^\221)\276T\364\240\275\366\007\022\276Lz#\275\311?,>\'M\362\275\340\235\372\273\2661\275=\375\343\026>t\2050=\357b\026>\226\031\337=\266\177\265\275\036\367\347=\305\217\350\275\240\334\016\275\226\346\244=\321&\021>\212\365\227=>d\215=f\307\232=\026\024\377\275l\016\363\275<\277\017=\360\267o<P\234\000<$\032y=\272\377\245\275\260C\037\276\340\375\343\273\243\326.>\270\214\355\275\002\226\247=\274c&=\352\260\275=\240\365\361\274\004\331w=\276\330~\275%)4>\n\r\227=+b\000\276\330s\215\275mr\205\275\036\220\360\275\035\t-><\251\010\276VzZ\275\220P\350\275\300\353l\273H\204\364\274\037])>\240\200\215=\347\216\006>>{\235=\270\330\215<\037\264\350\275\316\267\256=\374\021~=]\027\000>\010\233\201\274vH\341=\0208\340\274V\034\325=\0372\032>\310\233\034=\231g\">\212a\260=\311\205\006>\270m\"\276\331\2563>\013=\004>\246\306\344\275<\237\305\275`\337%\274\255\350\326\275\300fd\273\321\230\307\275\2704\216<\000\357+\273\3453\013\276z=\255=0p=\274~\032\350=\256\016\034\276\200C\372\272\002=\357=0\232\334<~\350\302\275\246\277\374\275\266L\324=\334\225t=\340\226\277\273\370U\372\274^w\201=P\242\376\274H\3757\275\351\302\223\275\314@\203\275\376O\367=\2006\234\274z\252\311=\007:\027>\000/\217\275\300\366\275;\0378\235\275H7G\275\345](>KI\230\275\000\322)<B\004\223=o \027>\200\025\336:\310c\232<nJ^\275\315\002#>>\322\340=,\310\034=\016a\232=\250\227\370\275\250:\305\274\010|\365\274j\225\031\276\014\220x=\2027\370=:\211\277=j=\r\276\207\033\031>\333\202)>03\033\274sA0>\354\323Y=\226`\330=\262\353\332=\200>\367<\3706\346\274\271\317\331\275|TI=\220o7\274~\017\246\275\3301\020\275\025\233)>\352\024\277=\360\244\245<\266`-\276\334\321\003\276`6\025=c\001\022>@\320\022\276\200*\351\2743\001\010>\350W\017\276u\316\016>\3400\332<\027\2053>P\241\225\2748\3051\2750\n\372\274\324\352\231\275P,r\274Yf\024>\264\304L=\225\371\321\275\261\275*>\261Z+>[i\226\275\0005\352<\215\2151>a5&>\275\322\n>\no\200\275\215;\207\275\000\n\314\273\346]\221=]\025&\276\263X\024\276\341^\361\2754\336}=z\361\316=\324\204\006=\026^\231=T\264#\276\003\266\352\275\025\316$\276\231\316\006>\324\265)\275p\014s<6\327\025\276&\201\376\275\300\362L=<\361:\275\300(Q<\273H\205\275[\355\031>\"\360\264=\250\266\215<\022\200\244=1x.>nh\311=\016\037\207\275\2406\247;\252W{\275\nS\002\276\304\234\024\276+\272\320\275\022,\205\275\354\371\030=F\337\333=\275q->\365;\000\276>\004\255=(\271\210=p\347v\275 \205u\2748/2\275\266\306q\275\0048\204=$hX=\330\272\210<\036V\216=Z\335\252=t\353\304\275\240#\314<\372G\263=S\375\n\276X\344\367\275\340\240\033\275\267\007\032\276@BN\275\326\223\372=f\0213\276X\332\036\275\362w\204\275\302\255\364=f.\274=+\321\023>>\306\361=\217\272\">>a\004\276Z\213\257\275Nr\370=Y\225\017\276\260\303_\274L\201\002=\004\324==2\250\204\275J\325\374=:)\312=@\342\310\274\240w\206\275\312;\262=?\234\020>\330Zg\275y\212!>\274\332\016\276<F?\275\333\234\035>\270`(=F\030\225=\363\317\'>\342()\276\367\200,\276\000\360^;\342\245\247=#\222\321\275\0061\372\275\026$\370\275\254\021\224=W\2100>\237_\002>W/-\276\3670\031\276\376\315\237=\230H\217<^\330\322=v\201\351=\006\330\333=\000@5:nx\341=\352\317\314=].\324\275\000\310\330<\355]\010>9\327\'\276\200r\327\273\2665\326=pzR\275\3041Q\275\352\354\376\275\304\207\277\275\220Y\351<Tn\000\2755^#\276\000\237\253\2738\035<=\0229\244=\360cd=\314A\212\2754\330w=eA\327\2750\003\013\274P\313\024\274_\271\013>\240\340;<\205*\034>\374\341\234\275\216\235\254\275\"\0321\276\334^\025=:\036\364=R\035\371\275*\002\347=\325\n\007>\020\003D=k7\"\276\336pq\275:\007+\276{\025\000>\021V*>\302\177\371=\216\345\360=$\316\023=\260\231A\275\316\031\024\276\246H\244= x\337<@~\316\274(Q\031\275G\257\227\275\270\312\202=(\236U\275\230\'\241\275a\004\020>t3\004\275\224\223\213=R\311\\\275\200\014\271;\007}\374\275\250\254\245<\310\234E=$\317\353\275\253\221\256\275\014\244\031=\020\270:<$cG=vd\254=\217\265\003\276\005y&\276\"n\227\275\206\312\263=\316\r\t\276u\236\037\276\336\305\354\275$\031\021\275\357A\"\276\020\232\032\274\230\231\300\274\247\000\310\275B;%\276\340TK\2756n\026\276\240U\350\273\036|\252=\372\214\276=\000Xd\271\215\316\327\275\340\256=<\3238\002>\242\201\312\275\263\351(>\002T\356=H\366\035\2750\334\036=\004\367T\275\344Y\333\275b\325\245=3\314)>\321h\n\276\030\222L\275H#T=\204\3435=\263\014%>L\010\221=\0348\355\275\314}\223=\247y\317\275(Y\004= _\246\274XJ\r=h\302A\275\222\377\270=\272}\271=\230\303\231\275\"\324)\276\221\344\233\275I\252\013\276\326L\326=\320\372\216<\177\362\001>\020|C\274\260>\036\274W\325\275\275$\256\031=p\347\223<\354\026.=$l\010=\021y\274\275\360=\002=\033N\010>\304J\001\275\273\314!\2769@,\276.\273\355=a\377\334\275\260\006\326<.\255\353\275j\320\264\275RF\315=\"\267\360=a\327#>j`\325=\347$.>\001M\013>\035\263\264\275u\033&\276\035\366\205\275\014\203\037\276\262Dd\275\254\324\021\275\260qt<\247`!\276y\347\305\275H\221\000\276\2505\262\275\230\003\303<0\017b=\\n\001=\262\243\260=4\013\027=\370\260\346\274\314\305#=\037D\203\2751\322\023>\300=\237;WR\'\2762D\027\276\224\003\003=\202\265\344=n\304\362=\360\206\271<`\324%\276\350Tb=\220\321\r=\030\\\244\274\206\251\307\275\274\357I\275\254\270;=\031\220\037>\177\357\027>\217S\022>[\224\007>\\\354\026=\206t)\276\240\354H\275\370\375\255\274\270\202\351<:\250\317=\020\327\021\276\310Vn=\300Fh<\240\020\223\273\351D\'>\034\354-=*\327\312=\352\241\370=_\261\306\275\276\203\245=\344\331\020\276\300\003T\273T\"\017\276\324\343\031\275\227P\301\275\212\000\313=1\342\037\276\305U\n>\204\r*\276\27033=\374x\036\276\210\370\344<\'|0\276E\242\036\276\002\000\023\276\0017\007\276\202\311\252=(\253@=\332\025\327=\230G\321\274\340\360\375<.f\300=\356\335\322=\204T!\275\364/(\275\250E\317<\014e==\366d\245=\216\251\360=\312\345\300=\000X\271<\314\312I\275\3477\211\275\270\345\236\274\1771#>\000\306\372\273\246\304\267=^\273\370=\032t\277\275\020QR<\350\350\017\275H\363\004\276s\\(\276\364^/\275\275#\232\275\200\262\215\272\350\324l=\316a\354=\322\216(\276\366\026\320=\014\377\324\275+\247\026>xV\334\275\000xU:\3200\265\275Z\010\226=\312z\357=\302\320\343=H\315\247\274T\374E=+<\031\276\001\343/>\344\214\267\275t\247k=\362/\r\276\004\371\032\275\020\244\365<\354\346#\276h\311\353\2746\177\300=;\350(>\276\207\263=\276\357\244=`\325\206\274\374X}=hp\201<Tx*\276\234>i=v\231\366=\216\025e\275\267\357\033>\002\014\373\275\036\373\203=\322\256$\276F[\223= \254\204=\220\n\020\275\353\272\013\276Au\010>8\220\223<p\260\r\275\240Ff\274\324H\004\276\027(\305\275\246\217\304=z\203\324=\324]\264\275\273;\024\276\255\017\n\276\"\023\035\276\217>\002\2760\344\211\274\263~->\370\205\372\274\370\002s\275\016\360]\275C\220\007>@\023\037\273\257\375\007\276\307U\232\275\320\276\002\274\373\357\033>\200\334d\273\236A\215=H\336\"\276x\320\243\274\267.\037>U\004\345\275\343\220*>\364\311)\276`a\367;M\036#\276p\356\022<\020\330\230\274\255\367\335\275\220\230k<\307\036\016>\230\236\345\274\245M\'\276\020\372\343\275\254<\"=\301\270\005>\340/d=\020\211\025\276\202L\325=\227%\262\275]>\313\275\341\204\356\275.\t\025\276t\2065\275\006\235\233=J$\263=\310\002\302<\376\303\341=\220r~\274vc\261=\200\347^=\026\264\275=\220-\025=Yi \276\236\211\366=\212\352\346=\340\025\241; \242\300\273R{\226=X\017\030\276\274^!\276x6\201<e\016/>\313\001\002\276\312\2154\276\310xN\275\035\370\016>\230\272R=\216\002\342=\330\205\236\274\320<p\274T\255\362\275\210\027\020=d\3246=\200b\036;p\216=<\000\366\202<\004;\023=@\305\201\274\030\025\021\276jEf\275\027]\000\276\236t\006\276\332\207\351=\365A\213\275\336\370\361=a\204\024>\030\375v=4\252\314\275\027\236\016>\010\250\001=,\352X= \237\334;\264\252+\276\344\260b=\261\265\346\275\300Gj=\351\320 \276*\016\252=\253\221\031\276Y\364\032>\321\255\005>\360<\003\275 \313\026\275rR\255=&\336\275=\260\275w=4^\336\275\204\014E=\204\341\374\275\300:\003\276l\261|=\234(+\276Y?\203\275\2006\200:z>\326=XOX=\256\235\301=\322\311\356=p\\\005\275P\334\006\275\354\344\257\275jJ\327=\033\314*>\366\202\373=L\202\010\276\022\274\376=B`\242=\322B\364=\314\351\265\275\371\356\376\275\212j\252=\024_H\275\241\364\r>R\347\373\275N\023\245=t`\004=\260\324a\274\306\333\346\275\000Cp\275 \363\256<\360\362\034<\030\256v\275\337y\035>\224\0049\275\310\312\\=b\237\244=\226K\007\276\220\350\310\274\336\302\257=\000x\322<pvl\274\213\034\256\275\364\2006=\301P\024\276\274\017F=\240\375\363\274\235\303$>\233R\030\276(\276\377\275 Rn=\263\0334>\3376\017>\367\025\033>(@\240<h`\010\275\242\034\327=m\323*>\000\027\271\2720\001\255\274d\235\013\276\270]\212\274\267\346\312\275\036I\255\275\273\255\021>h?G=9\035\364\275\2106\030=\340 \034\276r \364=\210F\212<)R*\276\022\336\264\275\220\301\247<\313\302#\276\266\n\032\276c\030)>\250\003\004=\340|w\275\261\203\004\276;l\000>\370\366\252\275\016}\330=\021\370\001>#b)\276\027q\014>|\253n\275\357\372\302\275S\361,>\233\003/>(`\252\2758\212^\275\310\337\336\274\367z\241\275x\311\235<\347+4>\300\367\\=\2664\226=2i+\276\302\304\177\275\240c\207<\267\266#>\314gX=\2746h=\360|\243<\200\257\257\273\330<\316\274\315\304 >H\207\364\274\013\3452>\370(\302<vU\315=\360\310\004=\002P\247=\251\257\271\275\014\005\274\275\300\300\272;@|\274\273y\211\037>t\031\031\275\210\373_=\330\302\\=\325\220\037>\005\200 >\267Q)>o4,\276\362@\313=.\373\346=\337\211\003\276\360\311\201<\320\027\346<\345\t\r\276\256\251\365=\330T\255<\251\323.\276\250 \007\276\252\250\361=\020\000x=Tr\236\275\356l\372\275\242\324\226=\305\033\005>\370\233\306<C\220\002>$\3207=X\242\217\274 \013~\275\300m\376;\035@\217\275u)0\276\232\323\231=\326\312\031\276(\337S=\000\221?\273\274\"\211\275H\026\310\274\202\316\232\275\003\010!>\200J\034;\344w\032\276P\201\210<(\016\223\275;d\251\275$9P=-\252\021\276\030\271q=\320\336\215<\240\374\374<\273>\n>\260\234@<\354,\225=^\235\000\276\235\035\023>(\235\007\276>$\234=\3278\033><\340\014\275\n|U\275t\'!\276\033\264\010\276\272\340\306\275K\340\243\275\235\242.>\205\251\337\275\200\377.\275\340\315\017\276(\210\312\274\352~\257\275j\241\350=P\250\223="
  }
  initializer {
    dims: 32
    data_type: 1
    name: "state_encoder.conv3.lin_rel.bias"
    raw_data: "t\357 \276#\034\257\275\036B\200\275^\325\027\276\350:\305<H\021(\276\223\215\024>#\273\010>)\033\035\276jh\244=#64>\303_2\276\000m\226:T\224;\275y\313\334\275l\347/\2768M/=\273\226\276\275\350A\353\275J\241\376\2758v\361\274@\303d\273\232P\320=\205\307%>Cl,>\034\301Z=\223\037\247\275{w)>k=\037>\177y\021\276\334Wf=\214\240\020\276"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "state_encoder.conv32.lin_rel.weight"
    raw_data: "\375\375\004>\020\221K\275L\035\352\275hm\314\274x5\r\275\277\321\016\276\272S\257=\320\371\262<\250\224\230\274u\2214>\241\r\n>+y2\276I\373\026>\302\357b\275\377\311\r>\305\340\263\275\362|\276\275\352\"\247=]\363\026\276\376\013\254=\030\322O=(\374\216=\354R\007\275Z9\377\275\243\030\032>\240\242[\2746F0\276\303\013\226\2754\246!=\226\244\227=\350J\304\275\2457\024>d3X=`sg\274\223\035\274\275\326<\263=\340z\323\273\300\271\326;~\031\263=\\!\021\275\347/*>JY\236=\376D\216\275\216\236\254=\364\256j=\357\246\036>\215A+>t%\341\275@\232\355\273\216\215\244\2758\025R=(r\303\275\3047/\275;\302$>\300\035o=\341\314\323\275\36313>\242\356U\275|\010k=\334\3152\276\364l\034\276am\t>\244\335*\276jL\356=\023\r3\276L\032K\275P\271a=\310\030\245<\005\344\031>T\373\001\276\240\037x\275Z\364\366\275\360FN\274\001g\226\275\262\214\275=\327,\001>\235T\214\275\230yr=$\020P\275(\007\356\274\245j\262\275X\266\033\276\363\353\317\275M\\\031>\246\211\322=\336<\\\275_T\031\276L\321!\276\376\356\256\275\255$+>\376\267\307=\rk >\007\'\243\275b?\312==\036*>\304\234\035\275z\365\373= \223*\276\340p\275\273\352\264\374=N@\355\275\300\nM\275p\340x\275\000^\252;/]\033>\245`\250\275\274N \275<1\332\275E\242\000>\222n\201=f\022\343=\256\031\356=\344UR\275\340\036\303;2\311\243=Qe&\276\255l\277\275\005i\002>\030\007!\276\300\341\303<\334i!\276_\370\000>g6\000>\0360\324=\000\2274<\001K\010>\340\332\224;(\237\325<\320QI<(\366:\275Jr(\276_\305\034>Tx\205\275/2\036>\000\264\357\272`V6\275\317\255\277\275\370y\254\275X\354T\275(F\226\274\n_\376=\310h\024\275[\203\027>\300`\355\274\310-\220\275\272\035\003\276\200\265\213\273\010\221\317\2758\225\345\274o\206\214\275r\241\224=\222Y\362\275\270\232\357<\\\202\240\275\327\016\">\026\346\370=\342\270\233=I\021\212\275J\260\304=\364\351\035=:F\315=`w?=P.\320\274p\324/\276\300\356M\275\356\036\372=\230k\'\275\006,\252=\302/\274\275\211\252\017>f\002\366\275\324\323\177\275\r\350\">\300\274e\274\374tx\275\r5\016\276\313\016\030>\004\261>=Y\236\314\275\256\377\316= \021\375\274 \240\206<5\264\241\275\020d0\275;\0011>\000l\020\272\207s\214\275\005\t\004>W\200&>\260I\241\274\360\217\305\274\300(}<V5z\275\261\025\311\275\036\306\340\275\270\2550\276.\217\303=\2067\003\276\263}\001>\031i\256\275\273p\202\275\256\366\274=U#2\2768\251c\275\223?\020\276\361\2422\276\240\207\347\274\006\375\237=\375\203\316\275\031h\010\276ir\260\275\243\3013\276\364\003-\2763^3\276\350C\t\275\3324\274=\264f\020\276\310\021\226\274\223Q\277\275~2\322\275\340\340\363\273\315\3560\276\346\307v\275\262-\374=\000Y\223;\202x\373=\364C|=2\310\211=\000\341\007\273\260\276G\275\000\322\245\274\243,\277\275\242<\367=~g\036\276 j,\276\362\361\232=\276.\216=\241v\016>\267\022\t\276X\240\257\2757y\032>\324\355\033\275\246`\325=d\270d=\300q\205;\232\350\350=b\177\t\2763\2224>s\332\224\275;t4>aB\014\276\014\353%\275\360(|\274 7\351;\251+\205\275Qf\003> \212\301;\234\0041\276!=\000\276zi\310=\244\240\021\275`\371\207\274T\227\022\276\241\343\">e\337\004>\305\363\315\275p\250D\274 \014\261<\366M\270=4\256*\276\266\260\251=h\222j=\020\361j<\000H\213:K\254\014>\3001X=\200LO=d\315\207\275\360\221\377\275>\367(\276 \357E<X]\220=\001\310\004\2768D\356<\316\350\261=\331\024\032>\242\271d\275\240\213\375\273\265n\016\276\256\321\271=\000\276\251\271\226\343\342\275\020S\030\275y8\032\276\267\032\335\275\260B\377\274P\341:=\274\353\355\275`\031\002\275\254\241\001\276\327S \276_X\311\275E\376\001>@\033\242\273@\027^=\240\277\322\274\240nP\275\370\331\262\274 \353\254<rvx\275x\350\266<\346Z\017\276(\304\'\275\202E\345\275\317\354->\260\333z<B\373\020\276\222\274\265=\202\360-\276\240uC<p\301\255\274\367j\000>:\335\243=\350\360Z\2750yR\274\230\274\270\274\240\334\302;\354\371 \275\230\270\036=z\014\245=\300\354\355\273\235\3150\276ul\004>0\021\312\274\351K.>\306>\n\276\273\007\001>\372q\211\275\360Q\200\274\232\"\377\275k\013\n\276h/\223\274$4\031\275+U4>\035\361\006>6\302g\275\376X\363\275\210\'5\275rj\314=}\3504\276\020\243\323\274\227]\263\275\341y\002\276;\3510>[C\033\276\204[{=\313\024\310\275\004\346U=\263\366!>0\353;\275\236\200\001\276\374\247_\275\256\275\255\275\024!\024\275/\021\001>\032\016\035\276\336\322\353\275\300#\367\275\313\347&>:C\337=\307\3732>~\257\334=\333r\332\275P\327C\275\212\351\344\275\271r\017>\000\254\354\275\263\371\'>\346n\267=T\204#=@\270E=\251|\316\275\332\027\326=z9\372\275%8\247\275\2401;=\031|\215\275 D\342\273*\301\232=\353h\244\275\244r:=(_)\276\226M\253=\210\364\330<\200\370C\273\223&\034>\353\244\033\276\202\'_\275|\254\014=\317\221 >,\224)\276\243\2413>\300\272\022<8C\203\274\365+\002>\304Z%=\263\215\005>\310j\302\275\264\334\321\275\300\377`\273\304\315\005\276\205\201\251\275\372\365\223=\230$<=P\356g\274 \303\221;H\315\031\275\347Q\020>\177\376\022>x\366\302<\360\311\000\274*\350\r\276\354\230\010\276\006Xf\275G\t\024\2768\246&\276\240lt=\n\367\255= \\\027=n\010\223=\004\365/\276~\320 \276\300\236F=N\321\230=VA\234=|>\201=\300\244&\275\330\216\033\275D\261s\275\2410.\276\2366\270\275\243%\033>YZ,\276 \310\243;\215\376\005\276\200\343\232\274 \350\215\274\262\010\352=Xm\334<\362\247\376=6\333\013\276\n\311\206=\253\323 \2768D\317\274`%y\274\364\037_\275\360\377\322<\000\242W<\3600\017=\316\275\332=\360\234!\276\302\t\212=B\023#\276Z\300\262=R\212\005\276R\333\210=2\026\262=![,>v\006\337=\352\217\230=\244\323\210=xf\371\274\014\'9\275\332\230\312=9\254\032\276t\2133\276DT6=@\2233\276tv\024\275\360-\214<w\331#>\200\\\235\274+\341\r>|\324-\275\024\014\030=\022\375\003\276\010\002W\275F\3163\276\230\332\375<`\230L\274\210\344\300<=\340\000>@\270\354\274\310\236F=>\324\202=?f\013>\340\002/=\246\327\252=!\326\331\275\014\n\201= \201f<\260/\317\274\306\225\370\275\300H\214\273\"@\330=\360\317x\274\020q\256\275\260\273\031\274\273V\314\275\360C\343\274\236\321o\275-\325\033>\356\263\243\275\261\026\024>\250\272>=\261\236\t>\366\377\305=\313\357\022\276\375\3701>\210`\312<\266\327\344=\310\351\216\274b\320\356\275\300\314\024\275\000T{\274T\013\r\275\214-L\275\260\035\017\274\240\215\304\274\022\266\350=\307x\r>jh\013\276>\006\324=\221\330\266\275\312\232\272=0Q \276Q\036\207\275@\270B\273\226\251\252=V\345\370\275{i+>B\327\230=\302\244\025\276\326K\260=k\002\023>\303\244$>P\033\267<~[\235=\337\254\022\276t\343,\276,y>=\342\245\270=\332\333\377=\335\342\024>\001\242\244\275\234\205\005\276\274\n\027\276R\230\261=\321\327\034\2766U&\276^\367\311=\222B\241=\260\t\027=3v$>\226{\335=\300\356s\274\377\343\261\2759\262\">\036\230\307=\000o\r\272<\245F\275\010\'\214={f\n\276\216@\237=\257\235\r\276$\334\010\275\000\361\"\275\321Y\'>\345\006,>\366H\007\276\222L\202=\224\354\031\276\360\226F\274,\232 =xX\035=n\315\237\275\223x\252\275P\277\201\275\306O\226=\354\351\366\275\220\277\372<O\"\254\275\362\334\217=\356\205\256=w2\243\275;\226\275\275\274\231\017\275H\253\340\275\033+\026>\2608\350<e\231\276\275\260Z\223\275\203\336\025>ep\032>\006\'\377=\200-\010\274\341\377\010>&\306\356=j\034\257\275jF\004\276*{3\276\220\340\026=\332\243c\275 \306\236;:\375l\275\306\223\233=\240;\300\274\216\267\367\275\2552%>4\306\374\275\326(\316=\244\025\022\275b\334\367\275J=\373=p\351\211<\000L\376\274\312\271\320=\021`\205\275Z\340\207=\326S\335=O\250$\276\265b\017\276B\213(\276J\341\306=O\203\272\275\256p\320=\222D\334\275`\233\276;!\020%>\206\340\214\275\324\0029\275\322\344\337=f\273\274=\2041\363\275=B\037>\373\337\033\276\347\315\025>$;j=\304\276*\276 \215C\2744\r\316\275\244v4=79\035\276\373/\026\276$+8=Xi\311\274\243i\013> \251,<\240\226\000< \322(\275\370q/\275?\3050>\332p\272=\2069\335=\246\263\004\2762\010\025\276\222x\240=\201\207\024>\374\277\307\275\263\376\025\276\000\310\2528\210=\246<\000\014N=\300\200@<X\036\336\275\241-0\276\272;\352=\272\020\305=\300#\225\274\252\207\260=\242^\244=2\312\017\276\000I(<\000~x:\000\206\2129pN\007=\222\234\005\276^\325\351=L\330#=\000\321\331\272\332Z\263\275O-)>\376\367\255\275r\365\246\275 6,\275r\0015\276\"\346\204=\034C\035=\rR\315\275\255\037\026>\330\254\230<\nR\325=\033\233\022\276rp\312=H\223\014\276\270\240\026\275\204\213\025=@\010%\276PFS=\370\000u=\214S\302\275 S\240\274\020>\021\275\254S\030\275\313\237\013\276\322\206\242=F\002\260=_\t2>z\251\222=\000\353\007\276\305\252\250\275`\246\255\2736G\264=SZ\014>\212$X\2758\200\265\275`\246\302<\252k\274=h\326\215\274\260M\331\2748q\342\274\343\274\'\276\n\371\307\275#\016(>&\227\335=\032\333\330=\205\204\311\275uh\037\276\251\007\235\275@\310\362\274\036\201\037\276\007\\#\276\037\360.\276\320\014\275<\244&0\276\255\222\001>\232k\260=\200Hi<iP\234\275\301O0>.\356%\276\263\362\020>\020\0015\275@E\210<\361\250\023>\026\"\323=\022y\202=\340\260\307\2737{\326\275a\361\337\275<;\005\275\000\232\325\271\315\256\374\275Cs\035\276\'\'\001\276\277\200\027\276\257\0200>\312\345\240=<\336J\275\330\360\302\274\027T\343\275*\321\243\275C\347\210\275\317\021\003\276\032\016\363\275,\246M\275\240^#<Y\222\230\275\306c\332=>_\235=\267V\243\275\317\352\266\275\227\2744>\340k\031=\240\244\226<~\342(\276\002?\332=\356|\302= \336\240\273\270#\245<@\020\005\276\035s\323\275\000\304\317\2718\223s\275\371\327\031\276L\221\223=\372\367\t\276\\P\324\275\206[*\276\212e\302=\205^\362\275\222\265\353=\013Q2>\244\335\001\276R\333\227=\233\371*\276Z\353\374=\330\233\024\275^%\326=~\250\006\276\016\024\346=\231\277\034\276\014>N\275\036\\\252=\024\031-\276\270b\250<\260\013g<\243\354\234\275\220\201v<\340\207\022=\370\377\027\276\346\276\364=f\252\020\276\300\313\315;e\363\022>\220\037f=\'\356\021\276\305\226-\276\234\272\r\276\310\"\277<\254\020&=\330e\310\274\336\201\323=\310\035\260\274%K\324\275\213{)>\235\237\251\275$ax=D\036\237\275X>\343<\230Y{=1\'\032\276hL\203\274\326\233\177\275\330\370k=\263\262\244\275\200\261R\273\023k)>\'\177\">K\355\210\275.\034\343=@c%\274\020.\234<\034\"X=\235\035\000>\3002\332\275\224\344\021\276$f\177\275\211\0010\276$\362\221=\020D\322\275\016\234\244=\226\240\036\276\210;\250<\276\344\240=\\\307s=V\003\327\275\000\344!;\373\227\035>\246\321\210\275\220\253\007=\010\021y\275\231\235\021>\0002\207\273\350}\252\274\354t7\275N\377\246=\200aG\275\016\236u\275\007\245\016\276h\201\013\276\365\344\267\275\360\215\324\274\344Fh=\260\362\304\274]j\'>\337@\031>:=\343=\323P\220\275x\353#=6\364\320=\000\354j=}U\311\275(\227P=\254\366o=pm.<\222y\320=\340d)=h\246\315\275\362F\316\275\020~\376\274\000_\007:\3459\025>\321_\376\275\240\230\341<\364\240\003\276\020\230+=\310\237\362<\315\230\020\276R\345\224=\3405\331<el\037>\002\026\343=\267\364+>\234\263\204\275\020\nT=\204j\356\275\240cN<\031O\341\2752\306\331=\350\252v=\230\004t\275f\274\221=r\034\357\275(\"\300\274\361\226\026>\360{\020<~b\227=!\256\032>D\362\"\275^\276\025\276\3169\340=h\035\356\274\220\240W\274\022\366\235=#\2050\276\272i\253=\036{\236=\222f\r\276\021\370\006\276\217\213\021>\300in\274\300N7\275\025a\354\275hJ\323\274P\257\240\274\377K%>\264\177\033\275\274C7\275\\\315\r=F\234\313=\240p\263\274`\345\r\2764\265Q\275\324\231\031\275\300\330\312\275\346\227\274=\274\225|=2\327\261=D\017\031\275\340\023\366\275U{1\276S\365\233\275t2 \276g\247\020\2768\207\311<\240\361\025\275\217\235\010>m\361\r\276\036\307\276=P\211:<9\t\">u\352\243\275\307(\002>%;4>@\336S;\274\251\203=\002!\241=ww\021>\037v\">{.\205\275\2670\027>\000\340>=\034\3327\275\002\"\374=\315\364\333\275\346\342\361\275\327\004/>I\226/\276\340z \2754\204q\275\232\335\313=(\240\222<\312@)\276Q\341\311\275\353\270.>f\023\342=\362Z\250=\0007}\272\033\344+\276v\212(\276%f\265\275!\210\265\275\215\017\344\275\320-;=\365T\t>\200\036X\274.h\237\275Z\222|\275\360\250\n\275\312\022\312=f\267\373=\230\357\260\274\032v\323=c\254\027>\000\361\256\273\212\231\250=UX\035\276q\352\020>\024\317\037=\226c\005\276\004M{\275\0005\000:?\323(>"
  }
  initializer {
    dims: 32
    data_type: 1
    name: "state_encoder.conv32.lin_rel.bias"
    raw_data: "\240\231\267;\302\242\230=\000\214\270\275\340v\037<\243\311\032>!\346\240\275R\254!\276@\3373\275B\353*\276\001p\035\276(,\233<!|\035>\250N\270\2746{\213\275x<\313<R\354\306=\214\037q=\347q&>$\326\234\275H\260.\275\300\307\275\275\357\002\030>E\371\n\276\230\034\016=[<\030\276\036\327\300=\004Mc=|E\200\275\200\\\031<\367\2602\276B\260\001\276x\216\351\274"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "state_encoder.conv4.lin_l.weight"
    raw_data: "p.*\274.M\013\276zj\303=1(\t>\310I\350\274b\300\252=`\013\010\274\304gP=\240w\035\274j\262\204\275\013[\024>\230\326=\275\202\203\035\276\207T\030>|\333!\275E\367\034>\0322\264=\342F\260=l4\315\275VN\321=\2019\021>b[\350=`\203\031=\372\205\303=\034#\317\275\356\230\347=#6\325\275 \373\350\274\321\337\313\275\035\010\225\275\213\354(>\230\325-\276\367x\330\275aH\304\275\230,\236<K\367\001>F\262&\276\321^$>N\237.\276\006^\370\275~K\365\275~H\362=P+v<\326\026b\275\353\310+>SB\r><\014u\275){\n>\236\0003\276p\036\'=\340\020\025=\027T\240\275.\300\204=\316\341\"\276T/\367\275\330\217\"=\220>\225=\004\276\000\2760]-\276\016\345\201=f\232\205=h\025\005\276\221`\256\275\270\036\223<rr\263=\024\351B=H=\'\275 +\031=X^~\2750N\034\276\215\3514>\n!\227\275c\236\017>\206A\366=\350$#\276\244\364\353\275oW\253\275\3261\233=\211N\t>\261=#>\223D\022\276c*\336\275\206\017\266=:R\231\275\244\\\350\275>i\340=\210\235\217\275f\310\242\275\272\275\307=H*L\275@\324@;l\035D= \350\254;\350\303\324<\366\254\312=\270s\004\275\247h+>\211B\016\276\026\245\270=\224\233[=\312v3\2764/\305\275r\330\224=\210\300\274\274h\230\217=v\336\200=\355`\342\275\220\216\021=i\203-\276\255\253\227\275\320\263\312\274\302n\315\275Y\217\017>\300\375\313<8&\364\275\000\266\033\273y\274->\202e\264=\320\306\225<0\223\314\274(\240\371<l8\035\275\370\245\024\276p\340\246\274\265<!\276\304&\t\276\215B)>>x\335\275\023\315\225\275@\253\327<\250\035\351<\346\"\303=@\033V=\017\365)>\233+\024\276\347 \213\275\300DY=\200\300\031\273\007\177\013>\222J\265=\350\264\000\275\026h{\275t\0321\276\332\223\236\275+E->\362\227\245\275\321\210\007>U\367\360\275\246\025\214=\204\262\372\275\227\314$>p\324a\274\000b\203\272\365\347\016>\002\037\360=\354\301\032\276\200-}=2\324\330=\\\361\016\276Z\000\261=E\0333><\220\027=`5\225=\356\325\274\275iP\022>v\250\204=\3259\233\275\010?\354<\022Y\251=j\376\330=!)\002>\212\350\267=\256\032\273=\244\357\221=\2523\246\275J\317\020\276\344}>=N\320\362=\0004V\275\242\007*\276`)\305\274\031-\036\276\270\027\234\275\257\252\315\275;.\021>\372F\331=\030\214\373\275\36047=\020\2767\275\260;\263<\302\302\370=W\234\010>,\373\313\275\010\263t=<M4\276\3135\263\275\242)\341=\3201\265<X=\225\2748\217H\275\251\355->\247\245\032>\216\346\327=\022\021\036\276\022~\367=\254o\210\275B\224\372=Z\3244\276\374{\020=\320\324\343\274\252\313\326=`(#\275\305\355\010\276\010%=\275\246\341\210\275\231\235&\276\370\335\232<\023\3364\276\313\260\003>`\332w\2740\300\\=`R\000\275wt\223\275S\373\035\276\345H\007>\2063!\276\330B\231\274\212qc\275\345\343\001\276@,\330;@\251u\273:=\322=Fr*\276\351\021\017>\267\235\000>\320\022\367\275\302\336\005\276xG@\275\276\321\257= c\336\273\243~\022>\023\021\330\275~\216\267=\216\225/\276\204\t?\275HI\362<\266D\314=%\326/>\264%Q\275\203\3664>N)\245=H$\035\276\274\224}\275.s\326=\220\333>\274\376\242\265=\000\032!;NH\301\275*\212\363=H\035\341\2740\036\305\275\277\010&\276\242\253\241\275\004\335s=6\013\364=\013t\002>\356\270\331=n\367\237=i\376\346\275\356m\267=8(\324\2754,\014=\022\000\212=S\236\267\275\324W\r\276j\325\271=\240\250t=x\264>=@\211\010\274\000D\"\271\007\373\027>p\317B\275\301\235\212\275HWK\275\310\340\273<\023e >\370d\216\275^\233\237=\230\264\347<\376\001\362=V4f\275n\346\244=\304\365\213=H=\252\274\371U0>\252bV\275\204\025 \276\t\314-\276\331\341(>m\'\035\276\225q*\276l\240!=\000i(\274pT\210=\220\361\031=z\326\235=\356d\n\276\250\220\002\276y\234\036>\342}\013\276*\231\347=\240\340\r\2750\026\037\275\260p#\274\226\016\247=\246\232\361\275j\203\221\275ds0\276\365\301\007>\244\273\025\276.Q\226\275\217E\017>\330\0136=\330r\022\275\300\340\244\274\250+\210\275\350N\000\275\336\010*\276\216{\301=\024@S=\260\243\205\2745:%>%~\322\275\312\305\260=y\276\020\276\240FN</\253\031>@)\013\274!\344\020>\206@\276=pXx\275\205*\036>\300m\215;\335[\344\275\370\003{=\300\312\273;p>\005=\341%\340\275\376p3\276\314\255\233\275\326O\317=\360\261r\275\034\024\242\275E\025\006>\020(B=x!/\276\222\240\006\276\026y\261=t\357\000=\204\233c=\353\207\304\275\350^R\275\330\r\370\275\020\326\205\275\322\030\306=\035$\021\276\220\177\205\275o9\021>\003I1\276*\000\227=\372\317\264==\333\225\275\360\0039=/z!>f\037\232\275d\260\020=zC1\276\236\314\274=\330\354Q=\225d+>hz\r\275;$\277\275x.\353\2744}\250\275\207\247\004\276\266\262\357=\330\364\030\276iN)>\030\020\354\274\360\024`=@\271f=\320_\201\274\261\243 >\223\301\034>X  \2759\005\016>(\037\337<\302\032\001\2762\t\253=3\341%\276\020A\315<\304\257\r\275\024s5\275T\301\265\275\256\214\363=~\242\255=\3329\341\275\2569\377=)\306\237\275\235\242\014\276So\037>\004\374G\275P\240_<<\360\214\275\225<\254\275\232[\274=\310V\224\274\263\232\201\275\345\232\026>\3622)\276\373B\340\275\350\300C=W\255\004>\277\310.>\356\332(\276\272u\374=\326\225\214\275\260\260Q\274#\303\352\275+<%>\352\354\347=n\341\260=\270\000\312\275Cx\030>\370\\8\275\334\353==\227\221\007>\240\021&\276\276\231\246=\232\372\364\275\312\275\342=\250s\267\274\340\235\221\275\345E\037>\346\310\377=o\305\017>dj@=r\332\327=\3501\r\275\000*\315\273\365\323(\276\200\000\252;\221\374\220\275<\020J\275\322\205\277\2756\364\267=\320\305\372\274\030\221}=z\3704\276\221\003\017>\214\320C=qY\024>\364:\323\275\317\2503>9s\t\276+\333\004\276\305:\025>8\331\323<`\036}\274\210\274_\275Rq\355=`C\013<4\243q=\267\252\324\275\\\023\n\276\240\270\361\273\204\222\022\275\017W\270\275\275\364&\276Z\262\367=\330\374\241<pU\310<\302\367\270=\362\261(\276\250\n\265\274\240\213\303\274N\267\333=\226\361\303=X\244\303\274e\274\270\275\222\355\201=\262\305\301=\010^\234\275t;\022\276|\305\215=px\345\2743\031\024>\000\234\033\272\000\240\246\2705\352\006>\307\0020\276\034\347\224\275\002\276\261=\216\272\257=\320O\312<\022\351\370=\222Y\017\276\220\364*=0|\260\274\002o\323=\236!\325\275\000\233w=;D\'\276X\2508=\3602\361\274\\\2409\275[\211!\276\325\210\027\276[x\347\275P\367E=9Z\003>dz\"\275\002E\364=z\360\327=\240hG=\347\016\022>\236\234\214\275\223\016\002>\257\362\036>\206\227\277\275\220j\303\274y\2464>@V\223;\031\350 >e\365\336\2751\317\232\275\200c&\274\2004\364\274\265\221\022>H\201;\275f-\236=\240\222\313;(\362\363\275\212q\267=\270\2017=4\370R=\353\375\022>h\205\202<\200\267\027<\245~\251\275\347\317!>\364\0366\275\230*e=\222\356\337=M\264+>\216t\204\275%f\275\275\254>\t\275\301\3544>RJ\031\276\022\016\260=\032\203\273=\230\2420=\214\231\t\276\365N\216\275\350[&\276\332,\202=\344\304\241\275\322\\\217\275\367\377\262\275j\250\350=\260u\306\2750\374h=\361\370\001>k\312\213\275\340\205\316\2730\"\005=\032\375\021\276\014\207\310\275\376\'\254=6\232\267=\020<>\275Fl*\276\000d\310\271\0316$>\3648\236\275\033\3030\276p\207\001\274\3039\223\2758\224K\275\326h\364=6N\363=\227\252*>\330B\372\275\260\370\"\276\030\016\207=`\232P\274&\247\214=+\231\260\275^\350\373=\270,2=0\335\227\274\224RJ\275\r\250\036>\300\243\374;\274\004\005\275\324_H=~4\364=\360\322\217=\314\277\"\276\n\371\023\276.\212\273=\016S&\276S\376\276\275N\321\302=\216\363\200=\311\220\005>\240Ok=\0000\036:0\nT<\274on\275\300\210\\\273\276\212\025\276<\035\322\275\340\213W\274~\320f\275U\336\332\275\370\263\022=0\324`<\010\230|=Fe\300=Z\214\352=1\2522\276`Vn<\266\263\302=\221\247\254\275 \211\001<\306\231\363=\000\350E\272Vm\230=\312A\207=\003]+>\224CF=`J\361\2746\261\245=4\244{=\tZ+>nn\342=\010\315\214\274R\033\363=\306\364\315=\002\243\237=\020\367\025<\275\2733>\030z~=\346h\262=u\037\'\276\034{H=P\323\025<.f\320\275\300\0174\276\244w5\275 \022\"\274\247\030\004\276\373@\014>\035\311\032>JW\344\275X\233\214\274\230k\273\275\3707\220=\236&\347=`j\034<\243^\020>\254J3\276\200\306J\273\"\t\222\2757G\034>\360h\216\274 \225\306\274Hju\275p\200z=VG\270=\354]#\276\305]\005>\262\230\326=\245\367\001\276\014\366c=\t\251\022>\"\334\255=#\3240\276\024\211j\275\324\006>=\370\010`\275\361n\034>\300\\\326\273.\224\341=\361O0>E\237\305\275L;\r\275\rB\n>8>Y=\255E\326\275@\"w\274\010\342\252<\350c@\275 \223\032\276\240A.\275|\216Q\275Q^\026\276:\224\245=\026g\200=M\'\000\276\322F\306=\r\347\017>\321\020\t>\004\305)\276\274\214>\275\315}/\2762-\242=\030\361\305\275\204\273-\275\254c\010=\230\270O=\374\321\342\275\333,\030\276\254g\301\275 Y8\274\260\212&\275\035C\003>\352\214\322=$\227C\2758\256\202=@\000\220=\240*\035<5\235\354\275:\237\024\276\214\311$\275v\017\313=9\214\024>\210\036\303\275$\333>=\026g1\276c\362\023>N\233\n\276TC\030\276\036\035\223=\364\345e\275\217\350\023>X`\347\275P\022\334\275\310\246+=\370?2\276\024\313\'=X\370l\275\256RX\275\255\004\030>\363\271\301\275jD\022\2764.4\275\273$\037>(\235\205<\300\264);\352\210\371=@\276\247\275\224-G=\236\3262\276 \221\321<\260\t\265<\025p\r>\301\206\212\2754\336\323\275\310ZJ=\001)\t\276R4d\275\275&\221\275\300\020W;&\361\033\276&\244\026\276\210\357\215<?\002\013\276H?\263\274 ~\264\2754+V=\300\265\005\275\326\2061\276\270\355\004=?\267\226\275\200O\245:\257\324\304\275\260\322\035<_2\250\275\360\000P\275\000~#\272\270\306O=\030Z\177=\325\342\003>h\323\004\276bb\374=\t\261\021>:\'\304=6\251\232=P.\264\274\333a\027>\316\275\020\276\036\t\344=b?\037\276x1\177=\\\333\254\275\332\263b\275 \245\017\275\337y\">\034\006\013\276\241-\035>\213\226,\276*\n\323=\237\007\'>\200v\222\274f]W\275(\320(\275\320\357\320\274P\001\207<\320\342\027<ppI=\220\3153<\335\370 \276T\201\225=\024K)\275\260\365\302<\350\353\r\276\373\307\022>\352 \267=F\223\361\275\210\235\"\276\274?F\275\247\240\022\276;\377-\276\000\322\213=\203\220\220\275\355\361\031>\357\373.>\032\026\270\275\217\315\202\275\312\253\245=\314\267\024\275\310t\323<tq^=\0379!\276l\353\037=\351\313\377\275\300\3143;\317\357\t\276\244\032\020\275\330\210\363<\270P\346\275\236}\354\275\024\352c=w`\310\2751\227\374\275\206[\330=?\026.>\303\371\000>\325M+>\026A\373\275\345\220\006\276YQ\232\275\203W\010>\241\223\031\276*m\353=\257\025\276\275\000\306\365<\030\354\177=\030\234\240<4s\225\275`\236\320;\310\3454\276\314\243)\275\000\203\025;\300\0057\274\376\020W\275\300\243\211<k\336\236\275\340\245\222;z\200\022\276\276x\346=\263\024\363\275\021\037\215\275\370\376\201\274\316o-\276\300\025\360\273\264\325,=\t\351\034\276\030\350#=\316]\310=\226Y\266=\340O\250;\t\367&>\365\021!>X\324\032\2758\214\225<V\232\324=\220\"\315<\307\212%\276\r \304\275\204P?\275\n\215 \2767f\307\275\337z*>#\216\331\275\232\354\262=\200\203F;\034\2528\275\373\370.\2764\030s\275\256\262\357=\000{\223<M9,>\304\373-\276\224\003\034\276\200cq;O\272\034\2769\324 >/\204\n>z\237\251=\330.\341<\226\333\315=H\025!\276\235\313\026>o\266\016\276\216\350\337=7\036\'>\265\0001>E\373\024>\322\234\300=\322\234\275=\316?\315=\330\312\r\275\356\367\320\275\276\367\323=@U_=\333\216\001>\375#\r>\216\001\023\276\327\323 \276\t>\325\275\240a\257\274\200\r\225\272#\231\216\275\003}\030>\276W\306=\010\037\362<\372\311\264=\247(.>\'%1>j\342\215=\010\370?\275\314\354\t=PvL=\006n1\276\025\201\210\275\001\335\021\276\340\"\355<\247\326\032>N\001*\276\200\277)\276\207$\001\276\206\304r\275<\310\026\275\337<\237\2758\273\333\274a#\014>\245j\361\275\004v\026\276\272\202\246=\251\010\031\276\200r&\274&m\361=\372q\321=\272\255\221\2753(\210\275\034\354g\275\206\362\246=\366\324\361=\210\2676=\032\021\360=\205\366\022>x\202\302\275\207I)>\306\271\343=\221\243\001>o}\026>8\016\336\2747\313\230\275x\341\350\274(\270\322<sk\">\241\277\225\275\332\323\275=2\263\230\275zk\'\276\016\000\225=\242S\017\276\374\314L=bP\323=\341s\010>\352\226\346=p\207\244<\320\255\302<\032\262\327=g\225!>\314\340\231\275\340!\340\274\370\222{=\2601\254\275pIZ\274\224\020L=\310\354\203\274@\377g=\230\360h=\270\216\365\275\205\3023>\364KJ\275$T\\\275t\357M\275|~\017\276"
  }
  initializer {
    dims: 32
    data_type: 1
    name: "state_encoder.conv4.lin_l.bias"
    raw_data: "\252\377\002\276\244\322T=\014\231/\275e\237\350\275q\224\017>\240\022\323\2750f\300<\2012\347\275\300H\250<h\206\273\275Z3\276\275\351v\336\275\346\342\372=F\002\227=%&\020>\026\300\\\275\340y\"\274d\372\025=@2\252<\030k\216<\325\317\021>@\207y\275Y\314\024>\354*\002\276\370q\260\275t?I\275.\322\014\276\232\335%\276\336\244\307=\020\365A\274\000\344J\275\306%\006\276"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "state_encoder.conv42.lin_l.weight"
    raw_data: "\0047\035\275\272\036\010\276\230\226+= \232X=\330\311@\275\332\030\254\275\275\317(>\020\022\213=\035R\316\275\306\275\367=?\326\001>\237\034\036\276\254\343\305\275OH\342\275\337)\000\276\340\207\303<\300\030-\2762\230\347\2758\3254\276z\212\316=\024~ \275\320\372\273\274\026\223\376=M\233->\036\330\306=d\246\215\275\177\030\037>\004V\032\276(\326\213<\320\313\217=\270Z\025\275\352\261\335=\224A:\275\276\314\233=;\222,\276\017L\036\276d\321M\275Ph\325\274\316J\230=H\242\341<f\347\326=\250\336\037=\0229\266\275\330\266\022\275\304\\R=\306\\z\275 \326\377;@\343\337\2744\2636\275\240\344\220<\350\326>\275\370\264\035\276\270\t\327\275\215\257\026\276\342Z\261\275SF\236\275\230\337.\276|6a=\236\356\247=F\373{\275h:\t\276 \3112=\227\332\032>\305\371\274\275\361\333\325\275w\347\017>@\241\301;2:\212\2754\262\212=\265\3661\276E\300\334\275\200\321\343;\226\013\364=\320\273><\036p\303=X?+\276s\311\301\275p\336A<!G\354\275\000\204\371\273\270\304\320\275:\\\271=\020\346\232<\200\332-\276n\204\310=\300A(\276Vw*\276m<\037>\374\311\026\276`\241\265\273\216\362\301=\261\3464>o\205\004>\333a.>7\0071>\320\014\325<\256\021\211=\2527\027\276:\220 \276\272\241\260=\234\231h=Z\256\243=P7\263<\036\001\212=yH\245\275@\251\237\274\350j\010\276P\252\350<V+\324=\376\367\277=h\265\366\274\335\370.>\366\335\372=\262\353\235=<y@\275\235T\002>\372\036\222=\240\027\344<\026\202\363=n\361\361=\004\202\211=\270\330\020=\312\006\006\276\200\005\263\275\300\360\361\275qB\367\275\300\363\037=\242\333\337\275\260f\212=\276r\232=|\033\002\275a?#>@\307d=o\377\005\276\004\247\207=(\035\374\274\201\332\025\276\373\257\240\2751\225\225\275\376\336\377=\273\027\017>\224\223\235\275\272\262\373=\014\332\004\276\215Y&\276\224\033l=z\352\355=}\023/\276\220\374\260\274P;R\275\320C\"<\347\214\020\276\342t\024\276`{L=,\333\031\275S>\000>\364\377{=\220\260W<0\n\370\275`K\254<\250gd=\323y\250\27567\324=\300\276:; \370\010\274\307\033\246\275S \032\276^1\030\276\334\243Q=x\230s=\3543\004=\020\347t=\242\302\200=0\270\005\275\236\304\367\275\254*\221\275<\226[=+f\246\275\\C\342\275@\013_\274\311\204\n\276Ho|=\374\225e=AJ\001\276\210I\030\275\264=s\275\031\355\230\275\276\352\357\2750\216\301\274\204\033\336\275%`\035>\253J\301\275\240\025\364<\206\033\341=\010;q=\332\331\264=@\2378\273F\272\367\275\323\211\206\275\337}\026\276\255\t#>\240\254\206\273\004\316w=\004_E=\255\013\327\275\210=/=\235s >\210\375\341\274\353\206\332\275\311l\326\2751\033\'>\334\325\034\2766:\257=\346\031\221\275\2646\032\275\0204o<\307\246\306\275<\347\014\276H-N\275\000k\235\275l\0217\275@\211\035;z\245(\276\372\200\305=J8\276=\232\315\207\275\366r\316=R.\230=pg\346\274\004|\205\275\210\360\351<x\312\363\275\3002\373<\346\006\303=\352\337\375=\326\274\370=\376\177\243\275\202\2773\276 \027a<t\025G\275sr\036\276&\374\245=N5\220\275\372\222\247=\3145\014\276y\276\023>\300\216(<\020\265\246\275{z\325\275`\256\230;\276\321\304\275\24183>\334\237\036=0\216 \275=N\225\275\035:\020>\254\310c=\026/\235=@\223;\275\277\352+\276d\305\274\275D\005n=\245E\027>Pd\013=\rR)>\221\013\215\275\"Z\013\276\000\200{\274\216\353\346=h\226(\276B8l\275\020e\265<\200\355\365: \372t\27459\023>:\016l\275\354m&=\320\3267\274\204O\\=j\367\263=&\254\326=\366&\376=\352Kn\275\321P*>$\323\037\275.\272#\276\006\026\264=\330\n \275\322\216\262=\202c\r\276\360\373h\274\222\n\220=\232\353\246=53\003\276\253\020\021>\305\034\240\275\300\242\205;\274Q&\275S|\321\275 G\304\274\003\321+>\274[\356\275\260\037g=\220&\021\276\326\326\273=\220\r\201<P:i\274\330\370\302\274!\200\"\276\230\232%\276\256\212\327=\206\311\275=n2b\275\334\342\356\275\253\321\306\275\372_\311=\202V\004\276 \000\221=\010ky\275\260\315\255<\013|\031>\234P\023=\205\213\t\276\007\330(>\330\310S\275\234mU=\330 \r=\355S\246\275\260\345\005=\250ea\275p&c\274cT\032\276\354\036\004\275\306\213\227=\370\201%\276&\327\374\275#\020\035>\250\271\223\274\303\274\017>\314+\037\276\000\213\371\272\021\371\022>\350d\230<`\261}=\317s\016>p\tf\274\210\311k\275q\361&>|M\024\276D\322\002\276\000\221\245;:\037\377=Z\354\027\276,\230\010\276\325\307\016>H\206\345<\270\372\376<\370\342\033\275\002\001\007\276\222\226\024\276@\336n<A@4\276\244G\020=: 3\276`@\235\274\244m2\276\274\377-\276b.k\275\000\206\235\274\000g\345\273w\036\326\275\243?\002\276f)\364\275FI\350=\2166\214=\342)\037\276\300\002X\274\000\007\203:\217\037\017>\300g\340\274\007m\246\275\034\252U\275W{\003>\254))\275\254\261\"=~U\222=Q\312\247\275\030\242y=Z\251\314=p\205\221<B\320\227\275w\307\t>1\022 \276\000\365k;Ez\226\275\200C\254<l\r\177=\332\340\344=(\004o\275:\331(\276y\3633>\211\243\332\275\314Hq=\222\275h\275^a/\276.\232\312=@4\303\273*EZ\275\367e\021>\335\205\007\276X\236T=\016\320\256=hV \276f9\355\275l\267v=\334b\226\275\360\035(\276\243\205\026>\200\272\264:\312\207\007\276]{\334\275\305\016\024>\370\345\016\275\372\326\206=F\302\356=\n\256\035\276\264\034X=\342\n\033\276x\032T=\270/\302\274\334\322\201\275\016J\350=1\264\032>\314\027\217=xG\335\274\251\3460>\352\264\267=\004\327\022\276\272\326\231=\256]\347=y\0344>2V \276@\304\316\274\330C\307<\013X\027\2765m\347\275j%\270=x\033-=1\211\036>\366\261\347=\032\276\375=Pg\334<\347\004\002>\000\226H=\246\214\321=0^\256\274\252e\027\276\000\251\024=(@\306\274\240\354\254<\266%\317=\375\027*\276\344\022\221=\346\332\353\275\254\277\001\276D\356\177= \371\277\274`kb\275XJ\201<_i\036>\256\377\322=\022\226\243=\374\3122\275\340U\"\274\250E\177\275Q\346\257\275R\324\022\276\t\032,>P\204\014\275\246\207\342\275\231\326\006>\257n\236\275\330\000\000\276\206\245\267=\000\333\275\2724!\353\275G\2701>\200\301\315;\312\377\222=\371\234\371\275R@y\275ph\t\2740\356\037\274M\224*\276\034\277\031\276\247\253\221\275\200g\210\274L\004\016\276\340\340\255;\277\205\006\276\253)\036\276\252\276\311=\022\213\210=\037\3612>\250\366\005\275)\265\021>\034q\035=x\222\357\274\375[\240\275\342V\251\275B\r\337\2750\372=\275\337\332&\276P\306\312\274K\372%\276\\\246C\275\340\372\264\274\272\372\277=q\214\034\276\006y\336=\377\030#\276v\t\237\275l\032`\2758\327\371\274a\252\026>\310\274\017\275\350\226\272\275\235\336\232\275d\\\t\275\216\017\277=\330\026\361\274\362+\266\275\017\314\225\275\317#\202\275\276\003\224=\336\327\356=\\Ug\275\220K!\275\216F\031\276\367I\r\276\350\376D=\334\252\225=\200\332(=7\0252>@+G;T\243q=@\242\370<\301M!>\264S&\276\'\002\001>\366\000\022\276 r\000<\304\200\204=!y\000>\234\360\000\276<m\"\275\344\366O\275\230\274\257<#!\013>\264\341#=\357\001\007>\t5\204\275\302O\267\275P\251\034\275\340w\177<\252\240\030\276v\025\003\276\214w\024=\330\366\253\274\272\352\355=\n\366\243=}\254\215\275\214e*=\245f$>+\035\003>\200\206\004\276\000\334,=\310\324\277\274[D\020>\313\213\'>\220\313!\276\254o:\275\200\214^\274\210\201\030\275\036\247\237=u\237\301\275T\257\005\275\r\210-\276\320\035\324\274\363R\014>|\324\013\275\220{u\275\270\261\212<\223n\013\276\244\317h=Z\255\354\275\"\376#\276\364\374C=u\225!>Ur\032>\356=\361\275B\266\037\276fX\335\275ge\031\276/\277\"\276<\003\026\275\020.$\276UG\227\275\301\2063>(\333)\275k\2700>\276\327\373=\001l\025>\355\214\006>\250\356\305<K\331\'\276\254Y\013\275(c\000\275\341\370\010\276p\3204\274\244P\236\275\220\307\347\275r\322\275=\020\222h<\014\021E=\367\354\272\275\341(\356\275i\035\007\276\240\336\243<\200D\203\273\233\206\027>\226\347\211\275\210\310\345<\034\006L=\005\244%>\200?\302\272\302\276\235\275\227\007\004>\340\010\366<\257\242\032>\3737\r>\024\202\020=oI\017>\370|\006\276>7\243=\016\303\007\276\340\311\210=.s%\276\364_\033\275\216\275\226=\313\360\020>\203\215\221\275\2159#>\360\004,\274\220%\024\274\354K\006=\360\033*\275\347\240\347\275\366)+\276lj_\275\223%\014>\215P\023>5\340\036>d\346\017\275n\246*\276\023~\031>\342\274\352=\250#a\275\024\366Z=\374\245<\275P\353J\275\251\303\244\2751\302\225\275\204\273\242\275\360\275\007\276\361\241!>\311\325*\276a0\">\346\334\334=\007?\025>\031\017\032>\235\267\010\276<\370|=b\340\375=\275\243\034>\262\326\314=26\323=\200^\300<\276\225&\2760\351\356\275\000\326\2679j8\262=\235\366\356\275\350\305\266\274\300\302@;j\026\201\275\277\265 >\300qC\275\335/\031>\264\207s=i\200.>\215\347\006>\321g\017>F\231\300\275\346\355\243=\240\263\353\274\026\324\363=\340\025\201=\201\006\032>\3101\300\275\367\216\270\275[\267\020\276`\221\033=\016\221\353=us!> \333\317<\036\370\276=Pz\177<\371r\035>\273\247,>\332:\274\275;\016\007>\014C7\275(\355\340<\260\3736<a\373\n>\372D\341\275\374\313i= \030\013\275@\204A;\365~\"\2760\231R<\322Z\363=\321\360,\276Br\367\275\352\024\255\275\202\301\274=\t1\231\275\233\2070>/\254\017>\3006\002\276nJf\275\330 \251<\320\315\377\274\260O\345<N\310\317\275b\234\t\276r[\352=\360\027\031\274\343:\207\275;Y >\320\266\351\275\024*\005\275\212\306$\276\220\236\020\276v\\\230=\260\207;<\311;\345\275\032\315\353=\364FW\275\260\314S\274/^/>\376\236\372\275\350\373\337\275~o\305=m\245\216\275n\312\002\276m\271\020>xp3\276i\211\024>\317\244*\276;\002\352\275\370\2378\275.7\377=\313q\"\276\320\270\007<%\373\017\276\002)\020\276oX\036>\320D\210\275\001R\r>\205\205%>\267\301\033>R$\347=B\227\311=&\246\263=\340\232x=\272\353\363=\010\312\r\276\000\342\200\271\340\311\311<\000\025\025=\220y\021<\273\026\023>9\226\'>\204\365R\275\232.\022\276P\265\345\274\262Z\333=R\251,\276\024\366\t\276\247|\026>\240\006\013=S \001>\272=\230\275p\204\035\276\233\354\252\275\364\247\010=\234\2643\276\247\231 \276\315\361$> \323j=)\207\334\275~\223\266=\021C0>Z\346\345\275qv\032>~\033\002\276\r\324\342\275\366p\232=Q\320+>~\211\210\275\336\222\002\276hF\262<Z1\254=\206\365p\275\220\345\211<\350\214\363\274\270\022\275\2758YT\275\276Q\274=E2\267\2752\262\341=\205\320\003>\020\260\301<v\363\236=`\324\200=\270%\231<\030\224\372\275,C-\275t\237\206=\252\334\335=\260\355\320<\224\221\026\276G\263\"\276@\274\212<\364\217\000=\230\255\032\276\000@r\270\\\251\000=l1\'\275\233\230\206\275\032\361\361=\364X\357\275\265\201%>\017\313&>\361\325\016>gX!>\350\216\311\274b\177\022\276/s >\026X&\276\322\324\332=|\215\213=\226\262\033\276\316\325\255=\347B%>\314z\221=\274w\003\275.\326\373=\034\035x=\320\274\254\275\232\267\256=0\037\004<\014\357:=|\211\352\275\212u\312=\222\376\301=\275^\007\276\334\371\203=\317\242\037>\345g1\276\240*\237<\220\267J<\216\372\214=\000@P\271\200\247l\274\nbd\275\005@\033\276hy\000\276\033\263\036\276\360\021x\2746\365\300=\265\025\025\276^\017\215\275\351[\354\275\360\240A=R\357\276\275\226\273\265=\366\332\223\2750x\377\274\354>m=\302\331\354=a\3611>\246x\"\276\204y\217=0\373\271\275\273\020\233\275@7A<qQ\t>F\'\246=c\236\323\275k\373\274\275u\3424\276\360\272\352\274\244\250)\275v\324\265=\240\007\006<\316\177\266\2758\177(\275\347\240\037>\340R\367\273`\371\020<\226x\243=\021A\005\276c\026\r>\320\253\004\276\205C\316\275\314\232\266\275\r\202\022>\232\255\266=^\034m\275w\200.>pOy\274\370r\030\276\330\262e\275l\312G=\312\240\272=*\010\307=v*v\275\024Wd\275\270?\032\275f\010\'\276\270\014\237<C\021\020>\355T\255\275@\273\377<v\t3\276\340\343\362\275\300\3109\273\376\377\247=\364\3364\276$0\003=9H\037>\031\221\003>\262\275\301\275\357\337\252\275\361/\256\275F*\217\275\\\263.\276qL+\276^\264\"\2761\016\315\275\010\001\017=l\263\036\276\020\315\206\275+\033.>?u\265\275vc\030\276Uk\022\276\264\323O=)e\017\276P\352\036\275\022\037\372\275\312\245\\\275\032!\344=2Y\257=\270!\005\276&*\275=\374\013#\275\205\221\304\275~{\372\275\005z\023>\254\r\024=Z\177k\275J~\272=\372\331\357=\020\214^<\204\365\"\275fk\374=\1772\006>\360\205\323\275$!-\275pN\017\276\223\324(>I\346!>.\025\355=\302\254\304=,m\036=`\363\001\276\242*\254=0\202\215\274\257\361\371\275\020+J<\255r\307\275\243)+>_\360\002>\210t\361\2747\350\017>\314\t\037=\205\313(>Z\260\331=x\313\372\275\220&\030\275\010\032[=\256|\213=n\266\302=\272_\253=X\372\005\275\014\027\017\275\2009\214\273\330(@\275\263\2124>\2007\326\274"
  }
  initializer {
    dims: 32
    data_type: 1
    name: "state_encoder.conv42.lin_l.bias"
    raw_data: "\021-\036\276\022\241\303=\230\207N\275\036\332\027\276 ?&\275\037\377\007\276\201\2050\276\316\254\335=\322\274\004\276\230\202\265\275{\215\303\275\270;\350<|\260\023\276\250\177\252\275R\303\275=\355P$>\205R\255\275\257\200/>xE\202\274P\205%<\225\373\026>\240\273J<\222\304\342\275=x\346\275\324:(=\004\302\215=L<!\2758\243\001\275\310\220U=\310H\206=\232;\211=\224\362!="
  }
  initializer {
    dims: 8
    dims: 32
    data_type: 1
    name: "state_encoder.lin.weight"
    raw_data: "\303\206\275\275\220F\212<\201\206#\276ns\016\276@}\305\273\344\207?\275\316\265\346=@m\020\273\177]\026>\032\023\005\276g* >(\227\213\274w\326&\276\227H\016\276\n\305\236\275\000\r\213<Z\226-\276\340/\353\273\030\007\257<\350\342\310\274hHG=2+\272\275\306\213\320=\310\271\202\274\000\220\2308\025\221&>\200AP\273@\216!<\270L\352\274\214\254;\275\"\206\262=\n\333\363=\306\225\326=\022>\305=\361\205.>\240\030\244\273\204\034\320\275\236\347\216=\240H\356\273\317\224\350\275\002\314\306=%\"\003>F\237\250=A\255\003>%\224\035\276\310w\357\274(\260,\276;A\037\276\204\311\r=\036\341\246=\200,F;\016\014\321=\372+\333=%\234-\276\241Y\200\275`\314.\275\374<\027\276\300\203\t\276x\"\215=\022\370\300\275\372@\310=\177\317,>`\275\255\274\034^*\275\204sz\275\024\373\004=0Qp\274.\243\300=\306U\257=\352\002\243=-\305\347\275\274\035U=\225w\031>G\370\010>$\230\316\275PV\331<\347_(>K\034!>\014\315?\2757\034\t>\013g\'>\352%\213=\000\215\276:\323\243*\276\205m3\276\234\037\273\275\354\341\225=\030\340\014\276\333g\000>\222$\250=\336H\274=X\201\207\275\0351\000\276,\231\021\276*4*\276\300c\r\273\320\r\324<\334L\020\276p\301\367<\241\327)>\373\205\010>E\024\003>\340*\304\273\244\3622\275\000ke=\030\352Z=\270\255\210=\316,\223=\315\242+>\346\347\272=\300\024\214\274\330K\027\276\001V\273\275EV\006>\3278\300\275\005\3233>\301\335*>\3002\224\274;\372\'>\3566\375=N[\245=\307?3\276KM\263\275l\242R\275j \236=\002\216\357=\262\364\374=j\031\331=\300i\020=(\026\322<Jbg\275?\343\000>\n\235\205=\243\234\030\276\336)\301=\026\316\313=\204\337\006\276\364\307\003\276\311P\025>F\273\346=\"\310\265=\031\364\007>3e\016>O\366\206\275\3201`\274\264M4\275\2607%\275\350\362\250<\007\365\334\275d\027\030\276\223\r\241\275\370)s=\n\000\351=X\332c=\022\333\330=u\233\235\275\031\233\331\275\221\245\336\275\3624\235=<\3759\275#\200\272\275\214qh=\030<C=\304+:\2752\207\035\276\337\213.\276&\326\370=\n\262\024\276\311\016\316\275Z\314\344=P\232)\274\3314\351\275vV\334=\034\266C=\342\205\365\275\\\330\346\2757\362\207\275Nn\367=\020\365T<\246o\354=\261\343\000>1\347\026>nS\321=:\350\027\276\204\254l=\370\374\020\275\007\306\032\276D\035\001\275\334\250\r\276PD!\275V 0\276\030\342\337<\373m\027\276i\233\r>\3066\372=\324\377j\275&\273\243=\005\246\014\276Yb4>\020[|\274\314\307\365\275\344\034\\=`\201\304;J\360\271=ui\035\276\212\000\263=\364<!\276\235a\031>\024\362\220=\263\005\001>@\223\312<p\375_<\004\002\030=\243#\321\275\0000L8.\311\365=\200nb;D\002~\275\372Q\313=\t\273 >\340\304O\275\306_U\275\247\\0>\2054\214\275\375\3050>\336\3462\276p\033\223\274f\310\250=\371\310\017\276\\\231\272\2754\366\203=\312\326\355= e\201\275\360U\r\274{\274,\276@\260\351\274\362\010\255=\200\210\303\274\365K \276\271\247(\276\r/%\276\r5\266\2750\207\217=\240\272\202=\334\303\022=\014p\017=\356\350\354=\010\335z\275H[\373<;\254\023\276\227s4\276\356?\241=`\373\367\274\034\233\314\275\025:#\276P\227\363\275"
  }
  initializer {
    dims: 8
    data_type: 1
    name: "state_encoder.lin.bias"
    raw_data: "\324\244N=\2441\006\276\304\026Z=\256\230\231=\247T\014\276\270\211\320\274\300P\257\273\007\350\'>"
  }
  initializer {
    dims: 1
    dims: 8
    data_type: 1
    name: "state_encoder.lin_last.weight"
    raw_data: "\370\361\214\276\034O\000>\300u\006>\030<\r\275Z\204i>\242;h>\352X\213\276B\302\231\276"
  }
  initializer {
    dims: 1
    data_type: 1
    name: "state_encoder.lin_last.bias"
    raw_data: "L\275\241="
  }
  initializer {
    dims: 5
    dims: 32
    data_type: 1
    name: "onnx::MatMul_430"
    raw_data: "\324t\302\2761\033\265\276\210\375\303>\320x\332=r6\001\2760\346/\276\246\374\263\276\234A\025>i\236\277\276dw\020\276\306\202+\276\346\005\216>\030R\353=\177\320\233\276\310\325\350=`\034\037<1\375\267\276G\212\334\276\240w|=\230\220\324\276\035\312W\276< a\276_\256{\276\260\366=\275\r;P\276\000\274\216=\264T\311\276\370\273\250=\300P\307\276\3007\354=\244 \n>\344\200\275\275:\274\217\276\320\023\303<(\214`\275\022\237\"\276\343/Z\276\346\024\022\276\310\017\375\275\207!\274\276\020\021e>@z(> \205\366=+\325_\276\234\347g>\344>\220>iS\177\276=\311w\276\2427>\276\0311\216\276l<\220\276\304S\216>d\273\332>\363\206\252\276H\362\333=\360\226\212<8\035\253=\230\300\036>@\rk>\230Pk\276H#\031>\254\005\315\276`;\370\274VG\250>\230\221\325\276\312\\\"\2764O\344\276\214s6>\213\370g\276J`\305>P \367=0\'\202=\344\345\302>\250\022\213>p\253\216>8;(\275 (\337\275\032\275\261>\302\177<\276\300H\316\276<\353\300\276h)\217>\030R\331>$[G>\352\203\210\276`jI\2750\224\230>\376\n\211>0\357\325>\300\n\301\274\030\206\211>\010c\"=\316\257\232\276\0271R\276\020W\241>\254\353\r\276\033\371i\276\0308\301>\360M\207=\230C\030>\234tk\276X\271\224>\006r\324>\0209\"\276\021\265\255\2768\033d>\350P\037>\204\310\357\275\010\241\003\275\256r\266>\242\370(\276<\354\305\275x\272\310\275P\204\303\276\022\351\333>\206\322\304>\260.@>/<\201\276\304\251\335>\026\237\311\276 \302\202>f\356a\276\270\326\226>\367\'\324\276\254\235\361\275\360&\254>H\251\311=V\030\246\276\250\325\220=\210\354\274=\304\340\313>\214\\w>\204\007\024>jc\245>0\026,>\000\316*;~\210\201>X N\275\360\004\335>\007?\211\276\360\227\020=\'\nZ\276\340:\231>\266\317\260>\310\t\271>\"\320\326>N\257\217\276\240mk>\304\325\002\276@\024d\276\260T\344\274\316\370\304>\276\272\233\276 t\360\274<Z\310>\360\031\225\276p1\222\275RD\207>\374\2448>\264\003s>"
  }
  initializer {
    dims: 5
    dims: 32
    data_type: 1
    name: "onnx::MatMul_431"
    raw_data: " \023\275>po\306\275x0\005\275\262\357\270\276\330X\277>\352\254\205>\032\334\241\276\020\301\226=\375\240\311\276\242\273\315>\030\262\252>\260\'\263=\000/\247=\203\342\205\276B\331\266>\340o\260>\267\272~\276\227\257~\276 \263\365=P\033\252=\352\223\223>\030\272\366\275\000\224\003>t\264\234>D\013e\276\366\014\331\276\240\375\036\275\226\201\204>\320\002\241=<.\237\275\004m\225\276\000U\013>J[\223>\270\225R>(\206\377=1@\264\276\370\261\322=\276\326\277>\314\r\014\276\334\034\177>\302+\232\276\340\347+>\302\034=\276$\264.\276\020\323\262=\354N[>s\303X\276@\002\300\275\360\206\267<H\204\206=\277\t\243\2760\334\007=\020\350\330>\344\250X>\203\036\256\276x\245\021\276\006\264\304>@\031\202=\360\365\225=(/\270\275p\r;\275\'\241\264\2768\017\031=P\317\207\276\322\000\342\27604\316\2744\240S>|\032S>\356\253:\276\360\003o>&\275\254>\244\377\247\275\314\212\247\276\340l\037=K\237\307\276\234\346\337\276\300\235\246\276Rq\324>(uG=\330f\243=hc\237\276\340LB>\224e\265>0$\212<P\250\203\275\214\353\246>\360\322\311=\254w\025>\276\263\246>\031\033\272\2764\261&\276\037\336\223\276\324\354]\276\310\311\261\276\350\ni\275N\251\255>\237\262\332\276\013\022\341\276\310Vq\275\010\374\001=\356N\322>\372\025\221> b\316\274\002\354\320\276\026M\\\2764{,>\034E\356\275\366x\311\2768\215\022>0O\200<\300\004;>@\"\n=\004E>>p]\010=\303\353\217\276\270\222\004>\204\330\312>a\007\267\276\224\363\236\276\211&\316\276\357/\340\276\360\213\231=\263\224\222\276\030\321\353=\250\352\001>*6\256\276\225\225\255\276x1\227=\254\036\177>\336\310\300>\262P\271\276\210\233\031\276\312\316\240>\374K$>\344\226\211\276\016\312\265\276^u8\276\306\273\300>\200\215?>\226{\236>@wT\276\270\241\267>\220\256n> \360\323=\030v\002>\350\225A=\372\\\243>4N!>\234\271\362\275\330\317\213\276J+\314>\340o\336>\230\242\231=\222\331\003\276 \335\200=)H\316\276IPL\2766\274\334>\214\277I><S\226\276"
  }
  initializer {
    dims: 5
    dims: 32
    data_type: 1
    name: "onnx::MatMul_432"
    raw_data: "\360\374\336=\036\310\221>\005\'O\276!\233_\276O\357Z\276l\3456>\250\343\030\276U\220\206\276\257\205y\276\330\247\321\276\200/\002>\224\303\273>\004g\223\275\372\344\322>\000Zi>\230\375;\276R?\261\276\274\213\306>(\354\354=\372\377\270>\031m\316\276l\032}>\232ZM\276h\257\273\2760\303\250=V\306\237\276\220\345\207\275\200!J;\214\377#>\000\340<\275TX*\276\200c&\276\311e\324\276\300\t\235\276\006\037\301>ns\344\276\350\204/=\210\236\024>\320$\020\276(S\307\276p\354\367\275\300b\237=KH\256\276\222j\242>(\234\037\276\370\340\220>l\032\001>V\305\314\276d\026*\276fR\243>D\000\205\275(B\305=h\241d>$\234\316>V2\337\276\237\347h\276\030\026\316=\350\307\271>\276\253\277\276\360*\271<\234\217\243\275\204\260\337>4\000\243>\250%\202\276\\\341\344\276$\337\325>\334\261\355\275\272\351O\276\226\260\225\276\014\247\323>\000^\027=\0001x=\200*\231>@\001\027\275<=\205\275`n\003<\272\342\276\276t\034k>,\027\261>\264E\n>\270\211\252\276\264\235\315\276@\346\235\273q0\213\276\240\037\303=\005\265\261\276\030u\244>\366U\007\276\3260\341\276\344\333\016>\016{\227>\304\3241\276\0306J=J\274\021\276\260\314L>\2346G>\206\211\317>@\326c<\024\325!>h\203\260\276x20=bR\246\276\000\360\330=f\326:\276\3421\344>\035\326\343\276\304\360\240\276\240\252\237\274I\253\304\276\3603\365\275 \035\357=\rG\307\276<\t\311\275%\303\215\276\220\342\243>\224t\037>|S\027>\2446\206>b\245\212>\216<\341\276\332b\305>\024\374\001>\220pN>+\271\235\276\244\230\337>\220\342R= \370o=d\214\261\275\270\203\326=\006\310\326\276\210\206T>\240{\262>\306\005\256\276p\251\343>\204\357\306\275\234/\251\275n\226\222>\220\246\350<\326 \234>\010y8\275hQ\250\276\006\205\341>\020\377\202\275xW\255=\352\360\324>\272xb\276\360\314\270\274\250\017\r\276\340\216\217\276Y\240\245\276\210\220\241>F~J\276@\220&\275\000\347\341<\200\345\215>x\246e>\3500\234>L\273\263\276r\371\315>\232\244\212\276"
  }
  initializer {
    dims: 6
    dims: 32
    data_type: 1
    name: "onnx::MatMul_434"
    raw_data: "tSR>\340\362\372\275D6\240\276 %\376<\340\0363>\000\366!:\264\307r>\303\007\240\276Xky>`\224\313\274\316\024\024\276_\204\270\276\307x@\276k\340o\276\323g_\276\037\202\240\276\377\013\205\276\302\257\242\276t*\221=\352\265\315\276\350\033b\275_\r;\2768\237\313>,R\236\276\310M\254\2765\304\202\276f\000\233>\320\0211>`\335=>\342D\254>`\203\201\274\240B\211\274\313\377\304\276P\223\034\275\320+\377\275PKG\275dY\330\275b]\231>\036\235\303>u\025\247\276\200q=\276\320j\317>H\254\310>\374\210\302\275@\221\252\275\034:\n>p\275\266>`\362\r=T4\n>\270\267m>Jmy\276\240m\232>(\177\024>|N\267=%]\264\276\000Q\327\275\014!W>\300W\220;0\243\000\275@\002\013\274\002b\247\2762#\314>\262w\230\276\341\235D\276\334\346\277\276@\355\"=@f;\274\000\023\017\274\254mW>\200\025t\273\226(\224>\252\257\320>8,]>\260\271\210<Vx\316\2768\305\210>$\377\210>\314\211\020> \270\276\274\nJY\276h\201\263=\242\376h\276\000G\021\275 \364\337\274@\231\272<\022\n\261>\200N\330\274|\216$>0y\363\274:\201?\276\254?\315\275h\221\"\275\230\364\314=\202\245D\276\016!\266>0\263\266<\017s*\276\370\013\265>\216\315\251>\006\224\263>:\257\237>\270\366\302>J\234t\276\\\271\262>\214\t\233=\200\204\265=\326\315\250\276\3349\306\276\370\000\301>0\210\265>h\221\014\275\300\'\362=$\275\334\275\210\361\000>\360I\214<\354|\022>r\263\301>\220\200\010\276\\\357h>\030\344`\275,\337\213\275x\023\210>\001\266\301\276 \247\242\276D\274\266>\024\025O>|\257\033\276\210D\002\275\361\t\276\276\3648O>@\357\227\275\334\270\034\276\270sT\276\270i8>\236\321\201>\240oq<\006\030\272> \2127\274\360\304]\275&\273\276>\324\363*>\020\252j>M\357\316\276\310\327\254\275\300\265@<\240oj\275\240^\212\276\343\000\242\276\3648\207\275\332*\022\2760[_>\252U|\276\247dx\276}\022u\276\226\237\257>\242\211\230>xu<\275\030\017F>f\373\017\276&\226\277\276\272q\252\276\216\317\264\276\010Z\n=\260\250\200=`\014i>\300\260\274;\274p\027>\244\266\255\275\310\240\034>\204\376->\330+\347=`\370k\276\010,`>\222\035\006\276(/j>\370\240d\275\360\254P\276 \210J>L.\253>\210\342\252\276XU\356\275J\257\214\276W\262\300\276\016\031\241\276\324\235\275>P\024\267=\270\025\371=\004hm>\324\265\312>\332g\t\276fIp\276$o\277>"
  }
  initializer {
    dims: 6
    dims: 32
    data_type: 1
    name: "onnx::MatMul_435"
    raw_data: "\244\037x>0n)\276\230{8\276\250\274\212\276\250\025\270=\204\304\206>\334\240\307>\032\263\255\276\310\357\225\276\200\350^<\364\376\255\276\330KO=R#\211\276\321\260F\276\330#\006\275\260\016\252<\340\374\201\276\310\000\033=!\367\302\2761\362r\276\330\307\020=\304\0103>l\\\264\275\3505\021>RA\220\276gh\273\276\366\026\206\276@%\273\273\272\"\247\276\272;\245>\322_\230\276ZN\207>X\217\002\275/K\252\276\202\225\313\276p\311\363<\210\202&>(rF\275l^\206>\262\325\227\276\366\3434\276\000F;\273<\2173>\010\022V=b\237\247\2766\340\226\276\234\331\212\276@\327\200\273\000cN>F\\\214> c!\275\274$\037>\254\274\260\276fi\231\276\340.\007\276\314j\310>\261\203~\276\310|\275>\000\364#\274V\365\004\276h\343F\275D\367X\276k\260\272\276\245M\242\276C`\227\276p\205\001>h;o\275,.\021\276\030-\250\276\320\266\222\276;k\210\276\336\'\235>B8\221>\000xl:\240O\354=\034H\266=5k\230\276\014I\r>\330\352^>4\312\204\276\nF!\276\274D\235>$\300~>|\370\213>\340\351)>\370E\232=\254:\325\275\030\336\002=\246\371\256>\014\201\274\275\027\334\273\276P\323\237>\3443\273>\210\212\355\275\023\352\204\276\030}\005>\022\216\202\276`\211\233=\000!\235\273\230b\345=@t\210\274(DL\275\210\010k>\302)\213>@\306\211\2766\377\201\276\000\236\261\274\305\335\270\276\372\300\310\276\276\206\253\276x\232\202\276\227\227\235\2760\347\316=\254\366\226>`\331\307>\205z\270\276h\255\352=\036(\036\276\0102\210\275\220\241|>#t\212\276|\\\206>l\345\271\275\224p\'\276C{a\276\322h\266>\276\346\271>\230\221.> nV\274H\203\305\275<lG>\240\374\311>\204\343\345\275\354\177_>\000wQ=L\323\235\276\324\337m>\360S\216>m\353P\276\360\r\331<\270\355q>\324\242\236\27507\317>\230\177Q\275\240?\322=X\374\315\276\020\026P\275\206\301\221>\026L\304\276X\2364>\020\204\327=p\300\235\274\3107\350=\224:\313\275\257\324M\276\244\315\'>\360\"@\275\200K\253>\227Q\216\276\000\234\016\273\000d\201\273\024S\265>\334\255T>\354\273#>x\336\246=\354+E>\300\276\031\275Y\363G\276<\363\271\276,\344g>`\360\241\274\020b\315\275\024\346\030>\320\376\330=\200X\266\276\006\035\217>l\313\373\275,\271\"\276l\307\206>\030\240\353\275\350Q\306\2763\202\202\276i\376\224\276\010\333\301=(D\327\275\210\001\246>\357\342\251\276\000\013\325\273:\'\225>-\225W\276\020S\323=\210&B>"
  }
  initializer {
    dims: 6
    dims: 32
    data_type: 1
    name: "onnx::MatMul_436"
    raw_data: "\0001\345=P_\021\275T\214\004>\251?\253\276\273\201n\276 t\366\274\340\251\026\274p\367\241\274\240\316n<TV\275>F&\216\276D~\236>\222~\235\276\030\352\377=6\030\211\276\t\204,\276|\267\037>V\r\212>:}\220>\223\025)\276p\211\351=\010y\326=\262\206w\276\350\354\014\275\340\325\241=6B\023\276\3225\272\276 \360\320\276\030\252\343=\021\031\223\276b+!\276\230\375\306\276\310\014\376=(\">\275\300\346z\274@ \202=\315\376\217\276\267\177e\276\334\024r>\260\244\301=lQ\272\276\366\206\023\276kO\275\276\340\316\372=V\034?\276@\266\243;\242p\310>w\r>\276\354\270\231=\001\343P\276VLY\276BR\311>`\275\022<vt\277\276\230\317\271=PX=>\244\267\255=\240uu>\036\373]\276\201\375\235\276\223T6\2762\316\207>\2422\230\276P\036\215>\026\343\265>\2006{\276\330\027\377=\360!\234\276\014\215\201\275\360U\325<t-\301\276\340R;\275\2209`>\260A\363=iu\311\276\272\317\006\276d\312 \276\000\210\314=4m\357\275\302\230\222>\213\206W\276\224\345m>h\225\227>V\007\307>\0010J\276l\360\212>8\261\274=\020\223\017=]\227\256\276\020\323\230<4/\204\276\216.\226\276\000U\353=8\250\236\275de\247\275V1\264>H\376\335=\204\0268>U6%\276\023\336@\2768\306u>\250Mw>t-\342\275$\021\020\276j\321\227>\242\366\220\276\n\322\214>\256\206X\276X\rK>O\032\275\276\372L\223>\004\265m>@[\001\275\014\026\307>\034\266\036>\000\370J=$\301w>@\257N>\n\n\226>\240\202\220\275\360\234\032\276\242t\214\276(w4>w\277\316\276\214\365\302>\nH\217>\310\373\235=\004G\305>L\347I\2760\303\246\276Ds.>\206\007\"\276\334\300!>\266\274)\276\320\265\315\275(w\272>\212%\204\276\\4\310> \361\033\276(\303\367=.x\026\276~!\230>83v=OJa\276\036\241\234>\270\263\277=u\001:\276\3464\237>\240}|>\354\030\010\276\230I\205>\340\301_\274\234\307\250>\306\365\243\276(\032\243\276\356C\202>\300bO\275v\\\206>\364,\212>\206\366\307\276\200\342\230>S@\267\276\214;\203>\276\374\255>\020i\236=\300\263M=\355\306\310\276\307\252C\276\214\022\255>\351O\246\276r\347\206\276\274\202\213=\200\017\024>,\014P>@\367\033>2\320\320>4a7>,\027\317\275\300P[\275t\302\270=\220_\351<\246\021\315>pp~\276\360\3709\275\230\355\002\275t\326\234\275\327\230\304\276d+z\276\350\n\007>WO\273\276(E]>\372d\206>"
  }
  initializer {
    dims: 6
    dims: 32
    data_type: 1
    name: "onnx::MatMul_437"
    raw_data: "\035\000{\276\264\315\030>+xC\276x\346\242>\005\363X\276\324\r\364\275\200\310\303=\026\200\033\276\352\010\310\276\370\326\243\275\214\325\253>\016\001\231>P\313\315<\352\365\200>\020V\277\274\020\273\365\275d\025J>\260\0042>p}z\275\220\340\351<,\374N>\272|\234>8)=>\034\014\004\276\315#\272\276\364\224\304\276\030jl=\037\325\210\276\342\t\267>\234\343V><\223w>\204\376\t\276\304\224\014>\250\003\024\275@\246\231>\010\354\367=\260x\222>`S\361\274\263\005\212\276\220\325r>\\UE\276\203qO\276d\215\203\275\244\005\332\275\243\262\270\276\004\244Z>\204$\202>p\245\362\274\250\307p>pb\372<\221\210F\276\304|\020\276\324\261\271\276<\243\237>\231/\240\276\220\235\244>|\321\206=\006\202\034\276\016h\265>\000:\205;wSG\276p\360P=\266\177\226>L\266\261>hJ\246>\232\366\261>\350\207\033\275\302q\204>\300\244\262\273\270y\257\276\306b\257\276X}\310>\340 \366=\253\357;\276\374\243\336\275\223:\'\276\007E4\276\030\356\236>\301\2624\276\250\2431>\202\374\203>\034R\243\275R\210\261\276\020\337\212\274\367\016\300\276\030\260>\275F\202\025\276\346:\242>\n\324\303\276L\002\366\275l\245`>\352\264\223\276X\230Z=\"\0275\276\243\235\210\276\220P\376<nR\007\276\034/\226=\230\225\222>D\020\314>\000\240\3578\300\275\025<\2665\255\276\026\261\\\276\364>\002>\2449M>\202\235\257>\332\036\203>\314\271Y>p\275/>\000\214\273>\330h\005\276\210+:=8q\362\275\270\332\205>\200\333,\276t\346\210\276>B\032\276\266\215\203\276\346\030k\276RKe\276\256\320\217> \032u=\000\321\231\274\360\270\232\274\214\017/\276\014y\324\275t\007o>\010\230\332=\340\206\216>\274\325\241>\244B@>\344\\U>\200\257\005;\300\375\312\2750\233\327=\330\005\342\275\010\200\246\276\030\377\212=<\037\231\275\326\311e\276 o\255\275\314\376\214>4\323\235>P\262\252=x\232\236=\262\300\213\276\230\373D\275\272\004\262>\320,\373\275@\305\237\273\024\205\307>\244\363<>\300&\360\274\360\007z\276\2063\034\276:2\264\276`-B\275\302\016\301>\212Y\213>u\360W\276\365I\262\276\246\203\205>fY\251>$\200\232>n)\250>\034\342\257\276\331\350\222\276T\201\222>h\315j=X{\177\276\000\025\314=\230\317(\2750\240\341\275q\373\254\276\352\246\243>\202\014\270>2Zr\2768\375R>\024\375\272\275\377\223]\276 \2659>^+\r\276\372\255\227\276<\240N>\034\250\253\275\276\"\245\276*Y\227>H\357W>\254\017?>\205\373\213\2764\271\253\275"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "onnx::MatMul_439"
    raw_data: "\243\356\026>\330gw\275\300\233N<\260>k=\353\350\010>R,\256\275y\306\325\275\221V+>\230\274:=9\025\265\275\224\177\202\275\335\356\035>\316^\326=S\366\033>\203I\035>\250\310\346<(6\260<\200\203\020<\020\001\217=\277^\n>\256\000\370=\260\230\252<\200j%=^\345 \276D\215\267\275\217p\224\275\200\255\271;\302\320\265=\306(\027\276@\362x=\362\371\331=\206\rl\275@\363\n\276.\223\271=\242{\200=\306\346i\275\016b \276\177\352/>h\243A=\230\244d=\002\020\217=\246\234\214=\017l\027>\213r\037>\013\333\020>\356l\320\275P\232\203\274\004\210,\2756{\327\275\021\304\002>D\232\002\276^R\255=w\304\024> \n-\276 \363\030\274\224\351T=a\037\027>\313#\340\275V\311$\276\247\363#>^\006\236=\2549\362\275P\3109=\267l\t>m.\014\276\200Q\211\273\000IL\274\205\'\037\276\250\177\003\275\370h\030\276&@\374\275\014[\r\2760,v\274z>3\276\356\'V\275\350\347\221=|\016\r\276\0056\016>\270\325m\275\323\202\005\276\264\261\031\275\264\2026=\021\305\301\275\255h\037>~\233\272\275&\214\334=\237\262\026>\330\353\326\274LY3\275\032\033\346=\354=\220=qd.\276\276\200\271=\025\326%>\277A\375\275/\340\026\276\362\273n\275b\027\220\275y\254\334\275\254\345\003\276^\350i\275\272\216\013\276Hc\324\274\225\232\275\275\344f\224\275C]\026>\300\367?<\320\300\311\275;X\013>\364\247\254\275H6\002\276\035\242\007\276\014Y\024=\031V\002\276\250\230\312\275\240\"\351<\375\256\316\275\0163\247=\265(\256\275\3379\213\275\364?V=\332\'\254=\340+\024=V\315\306\275\340\333<=\225\210\345\275X\333z=4e8\275v\267\356\275Tj\034\276\021\241\021>\305\321\233\275\336\212\241=\250\304\327\274(\373\200<lR\306\275\233\034\037>\234\n\016\275\220\244\001<<\243S=\336\024\372=0HK=\364Js=p\370\215\2740\265C<\220\201\326<PK\037\276\007\274\026>\307*4\2764yO=\245\251\t>\t\220\027\276^&k\2757~,\276WQ\310\275\224\347o=\230\345 =\344\374<\275\230\337\372<5O1\276\020<\262\274\204|+\276\023\314\274\275\030Em=\223\355$>to\017\275\020\202\342\274\262\260\031\276\026J3\276\321\301)>\252\313\313=\006\211\201=\255\037\033>\366\037f\275\211\201\003>\323\307\033>\013\203\313\2750;\020\275\300\242\363\275Q\242\225\275\320\313\271\274\314[\027\275\332\333\254=\266\\\024\276 \352\366\274\360{3=\"\202.\276H39\275H\3261\275;L\035>\203\207\004\276\0350%>\370\250\342<\363\244\212\275\324\3620=/\303\366\275\230=\217\274\220\022\022\274`\0025<\200Mi<`\361@<\034nN\275\260\227f\274F\005\252=\262v\334=\2273\270\275\214\333\320\275\014\333\014=\276\375\004\276*\373\257=@\254\314<\273\3232>h\207\213\274\252\025\234\275\010\0100\275\010\323\376<\230\2051\276i\357\037\276\202\220\227\275\300l\030\276\010K\324\274\271\252(\276\027\377\267\275\333\206\020>.0\027\276H6)\276*\216\361=\332h\025\2765\275)\276\373\321(\276\260{\031\274\206|\307=x\223\026\275B\215\200\275pDx\274B\242\367=@o\034;\230\022!=\346G`\275p?\255\275\276_\031\276q7\020\276+\323\r>\375\320\033>/J\001>\251T/>\220\367&\275\322\374\250=\300\316\001\276\220\210\307\274\363\344\217\275\250\020\344<(2\356\274N\371\355=\315\006\036\276]%\354\2756\374\302=\262U\210=\0052\345\275\354\277\001\275\020\034<<1\003\300\2750\303;<7Y\377\2753g\022>\227\024\r\276f\223\334=8t\204=\226\313\010\276\265\370\266\275\240\t\010\276\010\223\233\274\020=\336<\3621\341=\243W0\276J\251\037\276\244\214d=\366S\013\276\007\210\261\275\260\227\026=\021\340\225\275\024\036f=\000\210\301\274~\362\254=\216\241\317=\257f\300\275-]\303\275\200\270\362\275D\253\227\275\001C2\276\343R\007>\326\375\n\276H\374y\275\212\260\361=-\220\330\275\223\277\311\275\347\220\000>\000\221\370:\2129\335\275\200\235!\276`\270m=\004\234\221\275\305\007\007\276\014\266\345\275%T\023>\234\340\037\276\232w\377=q^!>\362-U\275\310\206\001\275\360\256\274<\020F\005<*{\335=2\005\305\275Iw\010>\336\266\362=\376\216\210=G\357\304\275&\360\233=\350\367\346\274`\300\202;\261M\240\275\260@n\2752\213\234=$\365_=\316\273\204\275\030\240\007=\200\232\341\272zS\024\276z-\365=<\370\n\276\236\362\360=\002gu\275\265\256\026\276p\031\036\276\307j \276&\367\353=\220u\000\275 \221\303;\306\374\332=\333\356\013>(F\"\276c\307\036>\200\367K;\231\264\023>\357\2713>\237T\345\275:\\\206=\330\211\252\275r\'\017\276\317\316\010>n\021\237=\265\276\267\275LO.=\000g\302<\375J\320\275djv\275\222\036{\275\224\227\307\275v\214\356\275\310\363o=@\205Q;\002\214\261=\273\014\031>\001\241\n>\256\340\247\275\252&\373\275\037r\000>\212A\330=\200\323E=\255b\030\276\252J\351=\366\202\356=\002Z\336=\350\305\303\275\231x\035\276w\213\265\275\305-\036>\022\211\355=\027j >z@\302=\307\034\020\276\271\203\034>\262\312\227=\016\016\311=\3318\037>\356\227\256\275dL\004\276\236&\202\275\014\325\211\275\000\235\216\273q\332\250\275\371\273\351\275\332\311\335= \221m\275\356\027\027\276\326\221\333=3\204\030\276\201\3302>&\010\271=H\373\033\276\346\231\252\275\240oQ=\034\3454\275\210Rm=\300\366\"=\206\333\352=\370;\017=\260NI\275&\341\312= $\220=\220\006\023\274l\355\001=\230\352\360<p\034.\276.\361\257=\217\345\">\323\350\'>@N\216=9\353\032>\0040d=_\362 >?\030\r\276q\201 >0\354\346\2748\331\262<\376s\332\275\036#\233=\220\233\004=x\345#=\3149\322\275\375t#\276\210`\001\276@#\013\275\212\254\021\276\356\245\231\275\254\332s=\247\224\'\276\217\244\025>\240\260\230;\020\353X<\236\234\311=\232~&\276\340Y\242\274.\325\303=\255%\017\276\002\364\374\275\026u\325=\2605C\274\254\231e\275\325\315\255\275\177n#>7\277\t>ap+>\'q,> \353\237\273\306\341\257\275\020\331\037\274>\336\360\275\004YD=y\266\t>\337C\223\275\020/\'\274\033x\325\275:\312\266\275`\336\031\275@<\013\274\255\006\034\276RdV\275D@\037\275\352\020Y\275\036\256\301=\300@\373;\313\250\027>\260\342\202=\032\371\256=(\255\307<\016|\272=\004Gd=\341\n\014>t\346\n\275\340!\010<\017\037\007>x\305\367\2756?0\276 \317\221;\376N\351=P(\001<\227\307\'>\260\336\260\275hD\343\274Q\377\026\276\316\316\257\275V\352\220\275@i\361\274&[\264=\353r*\276\030\216\260\274T|q= \367\315\274\017[\037>\221:\027\276\276\203\223\275\257\330\240\275\360\243\007\276\010=\217=F_\267=\370\016w\275`gD=\000\000\216;\330\212|=\243\247\010\276\230\247\207<\310\336\362\275IO1>\2004\033\276F\366\016\276cm\334\275\320\305\033\276\330z\351<\000!\033;\024\272>=H}S\275k\270\315\275\206\257\341=\035X#>\241>\013\276\335b\314\275,\351\224=\007\313,>\211 3\276\234\331B\275D\277\021=Y\253\013>\203<1\276\310\2064\276\276\244\237=\364<!\2766\025,\276X\346#=  \362\273W\231\032>+N\036\276\000\020\310\270\325*\207\2757\262\016>_\026\261\275\013c\016>\304\356*=\320\037h<\000\264\3609\000\rJ:\212\335\320=\2565\262=\224J:\275\230\177\214\275\000\237\306\274\235m\014>\360\2471\275\372Z\022\276\020\260\206=H\010\355\274~\034\374=\213\353$>\025\274\035>\032\307\367\275\020\013\357<\020\331w\275@\021\003=$[\013\276a\345\032>\014\261U\275\000n\n\273\000\263&;\330h\367<LpC\275\2679\325\275\016\372\256=\220\267\t=+\035\t>X\367K\275\302\331\355\275(\307F\275\004]\000=\237\t*\276\240\230p\275\264!\'=C\255\005>\370\232U=\366P\213=\035i\">\206$\236\275@[~\274WW\010>\323\003\303\275 _\251\273.\346\353=\200\355\367\274\035\334\010\276\232a\264=\3003\027<l\370!\276\010A\373<$?\200=\310\031\261<\22488=u5\023>\214%==\3461\375=P\322-=\333\273\207\275\340i\360\274#\017\000>\340\353\227\273^1\202\275>\027\237=\252T\t\276\021\356\035>6I\000\276@`\027\274?>\037> 0\006\274up\330\275\276\'\320=\271\023\004>\206\226\201=\356\372\256=m\000\220\275\263\314\'>P\037\006\276\256E\227=\036}+\2764\177\002\276b\010\271=\373\234$>x\366\267\274F\216\364=|\203\315\275Ra\303=\030\344V=6e\330=s9\375\275\277\003&\276\340\355E=@\002&\275\0207\334\274,\203\357\275-{\035>:9\341=\364\307\213=\334\312\002\275\312\223\233\275*\340\266=z\367\334=\370\233\333<\016\252\340=J\025\225=\006V\324=\362\276\340\275X\360\201<\244\233\225=Hv:=,Y\310\275n*\255=\257O\372\275\237\211\362\275\010\340\230\274\300e\243<\210\202\225<\004\261\014\276\303C(>\330[\250< \250\217<?\230\014>\030\3074=dn\007=\270\272\325\275\000\305O<\034\r5\275\312\260\310=\200S\253;\032d\343=\220a\022\275\030\347\210=#s\036\276*qZ\275\025\025\020\276\300\203\266\274tcN=\000d\347\271({\n\275\210\340\277<\216\231\223\275\230sR=Z\315\374\275,|\002=\n\364\030\276\240\031C<\227o\004>l\336#\2760\313w\274X\030\242<|\250\262\275\333*\213\275Mp\013\276\200\320\216=\272\351\300=k\2503\276\326\207\315=@F\364;N\207\226=\020\354\203=\316y\020\276\022h\254=\004\002\"\276 \t\225=\t`\006>\356\020\313=\371*.>\030-\030\276\276\202\236=\204\335\025\275x@\036\276\220\205#=f\216\210=\000~\203\272\210\312\004\276\r\223(>R\337\246=\226/\321=\013\013\251\275^4\367=\300\271M\274\311\311\346\275r\352\273=R\313\222=\217\035\266\275\014X,\276z\276\244=\031`\300\275\333<\306\275h\375\367<\374\331=\275\206\004\237\275\352\247\324=t\226L=G\202)>`pi\275\200\024\251\2738\211\315\275c{\006>`d\270<\246\n\367\275\267\226\024>\373\026\335\275\372.\007\276\200\247\367<\355\032\265\275\273\270\014>\'\001\001\276X5\032\276\342\347\276=\374A\233\275vd\314=\270\237-\276\315}\204\275\276\200\304=\340\321\337;\241\223%>\362\004\216\275 \366N<\200\254\025\275X\010\021=H|\203\274\220\031\020<\0249g=\220vz=A\300!>@+\363;@\253@\273H\3506\275(\003G=xKa=\204\202\354\275\326\234\\\275P\245\004<\023\240\355\275[h\r>\034\356*\276\312\036\233=\3040\n\276\035\026 >\244\367\002\2752A\345=\262S\301\275p\340\004\274t\336Y= 4\037=\005\204\013>HJ\306<\376\031&\2762K\300=f\020\262=\004\344\220=\036\035\362=\365e\014>tS\025=rE\242=\304\377\212=\303\364\035>4\016X\275\242k\327=\'\2204>\223\330\017>2\242\321=\345\215\360\275\343\253\033\276\334Q\024\2768\313\020\275*\351(\276\033\375*>\367\376\037\276e\240\262\275\210\352\033\276.\003\251=\010\0353\275\200\016\"\276\220\3474=\' \227\275\252N0\276W\"\001\276U\301\231\275x\336\277<\241\\3>[\305,>N\311\301=M\261\357\275\300\335\262;\306\231\340=\340\037\312\275\356\266\177\275\342\017\212\275\000\267\343\273\335\272\217\275\376\232\331=\010\324\257<\222M\211=HA+\276 \317\351\274\026S\354=yw\026>\340\350\236\274\376:\355\275NM\234\2758Y\202\275\234\250\304\275Xf4\276V\356\275=\000\2167<P\027\022\2768m\237\274\036\005\227=\356b\326=\262R\325=\000\036\034;`bI<\362d\241\275W\027 \276\347\240\372\275\\\020\232\275\000\007\241<\310\321\326\275\302`\301=}Z\000>vV\276\275H\265\002\275\250\344==\206_\351=\205/,>\274|!\275|J\017\275A-\343\2756\350\372\275\r\021\334\275\334\332r\2758SF\2750\377\021\274O&\034\276\371\271\035\276\300\013S=\376,\276=\300\270\335<%\343\036\276\200\220*\273\200C\224\274\020\310\353<@\003\211<\352\261\335=\'\252(>\001\n\357\275\036F\314=\017\357\273\275\2423\250\275\361v\026>`\360\250<=6\031>l\362q\275F\252$\276\010\321-\276F_\317=@\375\010\275\025c\001>\332\262\333\275\"\033\302=D\362\326\275\240x\301;|\253\031=3\035\007>\227`\241\275\305\034\017>\260\207\027\276|\300\031\2768w\230\274\\\272\322\275\034\224\000=\342H\323\275X\316>=\300\026h=\231\336\024>\364C\013\275\230\024\243<\200Yo\275\r9\257\275\000\000\2406$\2159\275\222\357\022\276\266\231\272=zlk\275\330\336\374<f\337y\275\360\213X\274\257 )>\370\341\371<88\334<\000\220\335;*\302\352=\254\000-\276\311\0014>\240\223\036\274dJ!\275\207\223\007>\203\2353\276z\332\253=\024\027\310\2752q\305\275\216\232\362\275\200\212\262\272\"\300\372=\305?\004\276b\275\244=Yy\025\276L\314\021=\354\230E\275\202\271\327=R\303g\2753L*>88\031\276\220/b<\344\255,\275\030DD\275\326\202g\275zC\312=\000#B\273`\362D\275\240\271\r\275J(\361\275e\027\026>\203\241\'>Yn\"\276\350B7=\315\366.\276\001\204(\276\346?\203=\230\251#\276@\221\232<\252S\010\276\240y:\2750\027\212<\303v/>(L\371\275h\002/\2764d\014=\236\351\276= M\207;ae\234\275\330\307\022\276\340z\"=\253:\217\275\340\022@=m\221#>\230X\220<E\342\007>F\355\224=X\n\377\274\024\327\245\275\230qe\275\210\321\377<|\321\313\275\004\333u=@\247\020\274,\352e\275 z\373<\236c\255=\243\0073>\264m#\275\252\255\204\275\300\215%\276\334\2674=\335g\243\275i\r\t>@Y\321;<\330\223=X\317 \275X\244\222\274"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "onnx::MatMul_441"
    raw_data: "\005\010#>\334\204Q=Z\315\327=8r\352\274\270\0078=\205\304\001>\356\216\310=\343\365\267\275\\\242\021\276\316\344\205=\305\334#>\222n\361\275\245\340(\276\276M\350=\240z\352\275\234o1=\252\370\264\275\234\343\265\275\206\326\252=\300\344[;\317\2351>.\010\361=\220\213f<|M\035=N\346\274=\026O\370\275\240G\245\273\306\334\370=b~\311=A\222\266\275CM\246\275\370\257G=\200\247\236;\234\361\006=\350o\203\274\234\343\t\275\307\323\316\275h\206:\275\356\021\303=\200\217I\274r\321\252=8\353R=0\335-=\034}\010=\310\245D=\360\372\214\275NZ\314=Q\014\013>v\310\337=\250\265\232\275\220\320\032<\300\274B=\265X)>p\037r=$L~=\355\2602>N\376\231=\260\221\024<m\323$\276\014\200\332\275\014TX=\240\371\r\274\000r~\273\000\334x<\200\017><\020\303I=\244W\201=\016\216\251=\360\350\326\275uo#>f\236\341=\003\363\325\275\340\234\234\274\270\2444=\370\205\023\276\006\004\371=\223\021*\276\220\365g\274\376@\327=\370\207\212\274\250\001\003=\335\204\034\276\013S\301\27507h\274\276\340\214\275\000$(\274\240\333\002\275\000d1<?\236\306\275,]*\275\220r\216\2740B\036\274h\227\232\2747\332 >PO[=$\r\311\275Z\231\025\276\360h\350\275\276s\257\275\211\261.\276\2126\247=\363\272\r>\240\022q\275\270\"f=\340\253~\274g\252->yH)>\306{\270\275\310v\236\275@\312\236<p\005\034\276\202s\241=\020\277z\274,\346<\275\200\233\320\272\220\345\300\274`\236\204<~\342\256= R\263;\232\317\306=\021>\266\275\347\202)>\000\277\336\274\371\217\n\276\365\200\032>\020\375\305\274\240Z<\275\350i\004=\037\340\014>?\372\000\276\014\360\245\275\344\353\r=\344\013==\232\232\342=I!)>V7\240=\272\335\317=\207t1>\346\262\372\275\305H\017>d<\217\275\344\246L\275\374\377\014=\0235\203\275\312\347\236=\242\343\303=\340\211P\274\341\324\t>\234\220%\276v\322\255\275\010\263!\276M\375\252\275\210\027\002\276/j/\276\312\250\204=\016\370\305\275\r\000\035>\364(\036\275\203\345\034>`\n\370\275\004\022Q=\357J\020>\362e\235=\200\034\020;\334\277\372\275\320a\312<Rv\372=P\326\357<\300\244h\275\265\266\013>\340\265`\275)\365!\276\200\2349\273h\006\236< \324}<qL\r>P\236\026=$\204K\275\254C\005\275\206\342\230=A\3402>;f\013\276:\364\256=\315\375->\314\213\010\276\302\247\304\275\323%\363\275\370\313\035\275\202\315\274=\314\373J\275g\216\r>r\245\327=\326\304\272=\300\000\027;\340w\342;\275\205\032>\347\340)>\205q\t>\026\311\361=c\213\t>\024\334*\275`\036-\275l\226\361\275)\017\024>\006q\'\276\254\001\003\276\244B&=]v\026>\n+\340=:\021\307=\341\030\026\276 <9=o\\\324\275Yf\036\276\242\211\317=\204mU=D\230\204=zF\311=\276\271\220=8Z\247<-\237\302\275\353k\021>\026m\216=\275\021*>\374\234n=\340\300^=\345\271\032>\342\306\250=\037\004\r>}]\251\275\374~.\276\035j\032\276\214\274-\276\01700>>\207+\276(\235M=?\306$>\004t[=\000\254\342\273\026\023\244=\017h\324\275hc\214\274\365\336 >nh\356\275\226f\274=\305!\222\275u6\017>\2404N<Y\201%\276\222c\317=\352\036\337\275\022\261,\276>\002\334=\326W\251=\323\257\026>\310\255\330\274\357\245\002\276\306\223\360=\t\3521>\014\3734=\205Y\355\275\271`%>1\321.\276\364u\255\275\211\274\004\276\007\330\237\275\332\306\246=8\263\354<`\356\202=Df,=\313I*>\010\211\002\276$\212a=Z\355\366=\340h\307;\250\251J=\000\037z\272\340\235\246<>\025\250=m\017\254\2756\334\251=Q\247\263\275\306[\223=>\347\216=\254+/\276\364k\036=@\025\266\275\372\204\207=\364\211}=\000\250\276\274\200`0\275\310\322\217\274\000\362\233;p\013b\274\254\034\026=S}\252\275\336]\346=$\006\t\276l+\215=\002\022\250=\000\001R:\367\275\'\276>\350\022\276@\257\333\2749\263\212\275\244s+=\0000\364\272v\026\332=\222I\200=\316\022\322=\302{\260=\314\035\021=\212\'\265=\236|\235=P1C\275I\335\241\275\300\377\265;\255\307->\225\340\002>:\033\347=i\350\026>\265\347\032\276\200\2029\275\232@\376=\313/\007>\013i\031\276\200\260\336:@\326_\274\354b\037\276.\240\203=\213\001\230\275\341E\255\275\326\357\212=\030\370X=\260\354(\275\240\271\013\276\210A\240\274\226N\373=\360\254\031<\200\201\316\275\006\230\261=\367\303\'>JV\261=r\244\336=\3335\020\276\330\314#\276\244\213;=\321\323\357\2756\327\357=pZL\275\244\326\000=\325\005(>\210s(\275\302\236\367=\303\037\300\275\312\022\222=&`\240=b\331\366=\372\000\035\276\320PU=\030\330\255\274\245\031\221\275J\001\320=U\"\036>m\345\014>\"U\237=\206\210\000\276P\311\224\274\240\362\332<\000\000F:c\033\r>\020Qb<\215D1\276\215\345\321\275\270\261\005\276\016r\241=\350\243\216\274\213`\017\276|\207\356\275~\306\360=\355S\024\276H\026\355<@\321m=\350\261\271<\226\024\372\275\306\213\333\275\200&\000\276}g\375\275E\313+>\234\004C=,\244\244\275\314I\214=T 8\2756\311y\275\032\032\371\275p\224\010\275l\322\343\275\3348\017\275\342~\305=^\342\244=\274}\267\275m\342+\276\217\314\365\275\020\200V<\230\2374=\000i\260\274\304\266_\275#\275\010>\370\232g\275\316[\225\275\264,g\275\220\375\\=\000\314\217:n\017\370=X\016\036=\250#v\275b\315\306=j\016b\275\243\226\020>G\360\">\250|\316<pf\235\274\220\320y\274\024\034\"=\255\016\212\275\207\334\265\275\267X\004>\246\0270\276\234\005\214=p\255`\275\264\230\031=\200\373\221:q\374\021>8\021_=\372@\227=\">X\275 \005\016\275\344\001L\275\306\272\345=\240\320\234\274@\340\317\274\026t\370=K\")>C\030\360\275\360\t\023\274\354\026\274\2752\253\223=\030\301\306<\274V \275@\346!<(\372i=\231\017\007\276:\265\301=9\024\206\275\330\376$=BA\244=^\300\246\275vl\361=\310x\031\275\224\247\305\275\220\217\003=\013\340\022>\340\376\362\2734ft=\364u\033\275\237\261,>\374\320G=\376\355\257=\332\354~\275]\210\322\275\334\027u\275\025k#\276\220\370?<\262\026\367=}\343\213\275\377\225\027>5\'\r>\013\235\242\275\207:&>\336&\326=\240\267#<\3106\233\275\374^\005\275\200\213\232<7\272\">\272<\320=|\022\000\275\034F&=\331\373\325\275>I\303=s\333\256\275\2370+>6r\277\275s\275/>V\233\301=\316\3332\276u\223\030\276\303\376\030>R\237\252=\243X!\276\330\220\246\2741K\276\275\312}\324\275\242\036s\275r1\307\275ne\333=f\245\334=\026(\310=\274\267P=\336\273\253\275\262\247\234=\002\245\236\275\310\362\254\274\300R\000;\246s\247=8OG=\370[\257<|m2\2754\006\034=r\303\247\275\033-\031>\022\212\026\276R\261\323=@gW<\270O\031\275\210`\353<\202\355\273=V\237\325=\217\273\001>\276\377\305=\234oK\275\020\"\014\2758\236\263<`/\203\275\036\221\275=P\326S=\003\315\340\275\205\024+>\372\n\250=\222\224\367=[\343\331\275\244\347}\275)\343.\276LI\t\276\374\204N\275b\275\357=\213\356\020\276\344$\263\275\036\000\335=`;\254<\271\265(\276\240/b\275<\000\001\275\013\210\007\276$\315?=\342\324x\275-u\r\276\370\350\027\275\357.\031>4\3103\276G\212\r\276\366\365\211=C\265\244\275-\210\031>\010n\250<M\242\213\275\230&\177=8z\346<\340e\210\274\276&\r\276\324\343\022\275\374\375,=\234\301 \276\210Z\360\274)&2\276\247\336\320\275\')\010>\001\205\r>0\353\031=\th\'\276\260\352\353\275P{A\274\251\257\343\275\000\251\037=\362(\332=6\r\364=(\246\024\276Ag\003>4\336\010\276\302\240\211=T\372\031\2766!\215\275\347\"\002>\250-\263<\205U\024>`4I\274\224\200(\276<\267\344\275T&\005=\n\024\320=\223\244\336\275\000=\214\274$\364\335\275\004\021\006\275\220YJ\275X_\305\274\362!\277=\020\004\272\274 1H<\333\247\251\275\277\021$> w\236<\027#3\276a\211\030>x\rd=j\342\224=s<*\276&\260\316=\241\361\251\275\\\372}\275\3605\004\276`\260\363<%\275\241\275\364(;\275CV\025>`\201\251<\352\336\362=2\026\234=`Z\356\273n\033\345=\206\001\224=\262!\256=\013&\t\276$\250{\275 \205I\274\210fW=n\224\030\276\357\301\n>\267\036)>\222C\353=nZ\247=b\0143\276\013{,>\221\307/\276D\311o=X\312\203=j\250\202\275\354\250\035=\210`\037\276\332m\302\275\200\367\315\273l\270\013\276\323\377\201\275AD\037>V\247\001\276}]\036>\245\326\235\275v\363\306=t%h=A\262\342\275\002U\365=\030>\027\276\013\214*>\022G\210=\322F\247=j\300\336=\221e\030\276\030\276\321<Z\201\272=#<\037>n\360\303=z\277\314=y \007>b\357\233\275\r\2621>\\!O\275@\363\002=N\t\312=l\237?=\030w\210=\276\023e\275\351$\352\275\024\202\220=8\343H=@\253\362<\350M\222<\310\'\"\276\356\373\364\275\243e\027>\014\307\304\275\362H\210\275\311-\225\275PX\'\276\340\020\007\274\342\200\350=\301G\231\275\340\002.\2760\n\223=\314N\016\275\355\357\010>E\032\002>RJ\351=p\266O\274\361\352\317\275\240\266\360\273P\256\365\274\000\356B\273b[\027\276\004\231\336\275\267g\035>p\334&<\341\013%>J9e\275\200\0256\275\300\006\341;\3640\212=\360\354\203\274\\\032\310\275\270\035A\275\2178\001\2763<\027>\240\364\256;\311v-\276f\336\276=\241\360\334\275\200:r\275r8\320=-\215-\276\270\214\250<\322\237\335=\230\217\t=\000\304\202\273\271\0025\2760\372Q<\200\320\213;\244\017W=\246P\333=@\n\\\273\255@\255\275p}?=\204eQ=\037\203\274\275H\016\032\275\345\236\000>\330`\355<\310@\250<.d\301=+f\326\275xtm=f\302\277=\000\007\032\274!M\010\276\321\253\"\276\340\021\217;\330\267\344<\002w1\276\000\021\317\275\234\203\201=\204\361\030\275/\375\006>\000\317J\275\342\374\327=\220\211\252<\371\216\017\276\027\200)>\364t.\275\331\376\037>\2325\252=\346&\360=\255n\021>\264*]\275\220{X=\022\351\215\275\372.\376=x\371Q=\345\327\014>\\\3027\275-\034\305\275p=\317\274\177\007\034\276\024\333\214=w\303\243\275\nq\232=@\264\306;\204\250\206\275p\233a=q\363\306\275\2609\206<\377\223+>x\227\306\274\360A}\274\212\361\323\275\000\363N;\032\353/\276\256$\244\275\254\253\034\275\272$\360= \374\023\274\000(\3218\264I\222=\230\035;\275<\2717\275X\031.\276\2678+\276\222=\372=iy%>\276\035d\275\210\350B\275@O/\273\252B\233=\360v\312\274-\3233>\366\017\270\275\261R\206\275f\036\314=\263a\">\252w\250=\250\242\\=\216I\274=\n\226!\276\200\327\201\275\236p\037\276\033\260\320\275\025\335\017>\214\212\004\276\3706G=X\256\331\275<\220\201=x9.=\310[\272<\374jC\275\361\226\013>\205\010\200\275\221\225\010>\000e\246:`c:\274\010\263\022\275\'X\033>\321F\025\276\327\366\023>\240\337\202\273\010\256\224\275\200c\"\274\362\365-\276`\014^=\307\237,>\200a#\2760o\000=\2241\355\275C\272\361\275\350\026\020\275\021\261\376\275$\210\035=\353\213/>\244: =y\362\014>\307x\000>Pj\335\274\245\205$>\260\3208\274\000<\233\271\251\204\026>`/\256\273Z\365\367\275\\\002N=\031\332\335\275\236\274\007\2769\357\013\276\304\300\021\276&A\340=6\367e\275\220\253A\274\353%\037>d\2070\276.^\343\275\274\370\\=bq\366=\0101\261\275\\O\203\275\204S&\2760aD=\322\216\373\275\262\024\215=\371\260\014>T\273H=\004\267g=\022jb\275f4\030\276\234[\220=P[\005\275$\346x=\266\206\246=\320\355\250<\376\014\211\275\210\311F\275\271\274\206\275\027\262 \276W\0100\276\352\013\275=@\355!\274m\366\327\275\326j\r\276\304\205j\275Rk\240=\314g\216=\210\220h=\245\236\030>%#2\276\010m\"\275\340\315\315<\222|\242\275(&\347<\306\335\252=\013\353\005\276P\2353<pl\002=\365=\003\276\260\244\010<\311\252\025\276=\004\027>\227\037\275\275\321\006\037\276\203k\004>\341\266\256\275\200\022\r\273\302t\377\275\376\301\306=\033&0\276\246\031\253=T\226\n\275\240\037\261;6\343\343=H\035\210\275\332\"\356=\026g\302=\220\2158=\3400S=k\274\253\275L\0206=\026\324\367=@\242\364\274H\272\374\275p\035\367<\n\357\300= \253\311\275F@\350=\200\222Z;`\317\310<\322\335\255\275\214\003\353\275U\376\r\276\240R\375\274\035\231\225\275\3149\246\275\364b\355\275P\254\256\274\276\223\240\2752\226\235=\300&\240<15\264\275}{\003>\001\235\001>\226\350\377=$k]\275i\022\006>\260+\301<\260yh=`9\204\274;\311\'>\232\215\243=\315\251\255\275\261O\023>\314\2663\275\325\221\023\276\352\336\356\275\371\276\004\276\340\312\235\274hv\004\276\300\252\202;\360\245\245<\216\260\347=\310\276\377\275\254$\'\276\000\313\222:g\244\020>\026\360\202\275\036b\263=o\300\">a\332+>?\013\331\275\034\003K=\030\264\372\275d\326\006\275\340\364$\274]\302\r>\332\177\300=\203\275\014>\347\276\245\275\335W\n\276\252j\371=\006l\010\276x\316\326\274\214\271?=\350\372 =/)\305\275]\251,>wZ\306\275\331m(\276L 8\275\241Q\200\275\360\237\265\2748\373)\275\341\223\237\275!\022\236\275`D\274\275rv\234=\330x\013\276+\330->\310>+\276`gD\275(\010\301\275m\207\305\275\371\377&\276(\270<\275"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "onnx::MatMul_445"
    raw_data: "\314\217\025=g\t\r>{\302+\276\265D2>\301\022->kB\013\276\033\317\004>\350\037\240\275\\\2762=\2621\301=7\247%\276\300\3710=p\272\251<\316\356\003\276\274\\\231\275\016\255\317=\t\235\036>\342-\242=\024\321\016\276^j\266=\021\036,\276,YT=\334\276\350\275\256!\307=\006\227\325=\251\366\022\276\\\354\226\275d\244\320\2754\275R=\340\307x=\300\001E\274H\010\346<\375\264\024\276\210A$\276 |n=\306i\t\276.\327\366=\336m\225=\376f\224\275\210\266\333\275\356\037\234=\002\023\335=\032\224\272=hk\357\275\022\376\237=\242D\311=@\222q=b;\033\276\366\033\371\275J\003\327\275\2004\324\274\323v\021>\367k.>\212]\343\275\027\245\035\276\300.Q=6\002\337\275\370\305\336\274\257\237\341\275 \3471<\204\372M\2752\205X\275m\246\244\275\005\357\344\275Z\326\322=Pe\006<\314\216\200=\230\366\234\274|l\265\275\310\177\214=\027\305\363\275\030(\222=\3064\210\275x\034\310<\203G#>\007y\204\275mt3>\306=\002\276\300{\216<g7\262\275S#\035>nq\005\276\036\230\335\275 \271\026<\270\344\305\275\"i\004\2766+\272=\300U\037;\300\224\226\273\300\273>\273\320\224*<\355\303\013>\222/\362=\366\253\315=\200\333P;B\346\001\276\374\240\r\275\345\361\354\275\264\355B=\035\352\033>;K%\276X\233\020\275\021\225\016>t\014\t\275\226\035\007\276U`\335\275o7\n\276\376\016$\276n\271\231=\253\322\245\275,\373q=R\035\211=\246.\"\276\267o\210\275v\254\257=I\371/>\350i?=\035n+\276Wy\342\275\312\216p\275Ph-<\355d1>1\017\033>`\214\206;\340b\316\275\262\244\366=a,\r>\241t\347\275\200p\016\276V;\200=F\330)\276Fp\270=AL.\276\323\246\032\276\272\237\022\276\006Y\235=\326\000\257\275UW\332\275\002\353\177\275\305\026\013\276\013~\016>\240,\306\275\270kd=0<\341<\000rc;/\345\">nd`\275\022,\335=\324\256\203\275 \223%\276b\001\252=\3437\024>\2564\242=2\001\254=@\253\320\274\2020\376=\017\023\023>\221<!>\354\252R=\033r\026\2767H\254\275H\344k=Qr\010\276\270T\004\275\"T\245=\331\230->\333/.\276\323\265 \276\360&\206=\367\025\006>\201\327\374\275\014T\t=\361\034,>`\375:=v\000p\275\361\310\'\276|\330\035\275x5\326\274\276\037\325=AS\033\276\220\257\032\274\307~!>8\256^\275\212Z\034\276\200\312\332;\276\240\373=\262-\220=\224n\006\276X\357\016=\007t)\276\272\264\237=\270\210n=\343\267\342\275\232\334\245=\200\252l=m5\214\275\360\352i<\016\211\305=\3562\222=\336C\253\275>n\260=\200\n\376\274\361\026\010\276\370\306\327\274\362\267\234=l\270.=\211\020\006>\340r\031\275a\345&\276\010P\222=\n\200\014\276\000\243\364\274\340\356\260<p\335\343<h\263|\275\376K\375=\314x\305\275&\3070\276\nL\276=\0268\226=\336\327\342=\006+\341\275H\014\375\2752\227\256=Y\2132>\272\232\303\275\270\353\374<\377\3162>HBq\275*+\336=<\2777=\370\020\031\275\240_\234\275\277E\002>N\n\214=\001\260\003>\364z\014\276\252\324\245=T\3475\275<Jd=\214\275\205\275&\264\323=\001\345\001\276X\022\263\274\000k<\272\000\013R\272\005\226\227\275\300\363\023;\240\024\227\274d\217\006=p9\373\275\276\205\223=\263,\014>FH\205=\330\0339\275\250\3721\276\300>J\273a\272\322\275\274\261(\276z\371\203=!^\t>F\231\232=\310py\275\032\250\376=\364Np\275\356\202\352=\210W\266<\005\350,>8C\240\274\252\351\006\276\202\232\361\2758\243\344<z\266\353=s$\312\275\000\350\317\274\000\n%\2761l!>\276\237\307=\200\361\357\272\250\214\202\274\363p\000>\316\341\227=\020\312\317\274H\323\255\274\353\020\237\275<\233\271\275\311\264&>\314\035~=\230\031\303<S\272\023>\221\275\023\276\205\321\027>#\362\000>\266z\355=F\277\211=0\350\037\276\200\225>\274$4&=Ln\r\275.\311\247=b\272\337=\373P\004>\2734\023>\374P\034=\371\245\n>\364X-=^-\001\276\270\205\261\275\327p4\276&\371\330\275\200\205\021\274L9N\275\206\254\271\275a\256(>\274\326\211=\3568n\275\320\276R\274\366m\246=\213\016\033>%\2024>q\357\033>\264\020\360\275\345R0\276\025k\n>(\375v\275\254\244\033\276T\245\037\276\016\354\252=\200\277\237\273\324\354\225\275\326Z\263=@u\371;\234Iw\275\250\371\377<p>\321\274\230F\352\2748:\367<-\313\204\275\002\024\235=wK\021>w \243\275/\r\256\275\266=\361\275\300d\310\275v;\354=X\345\213=\261\2674>\013\r\317\275\230]\250\274-\013\023>L\243G==\330\224\275\377\325\033>\177\211\013>`Q\227<X\034\335\274\200m|\273\350_<\275\240Q\000\276\311\250\253\275\036\225\366=\217`\270\275\200\t\341\274\357\344\274\275\300`\004=\360\356\212\274\250Q\220\275d\317\004=\032\231\272=\354\352\274\275\300\356{;\250\361\221\275\"\263\326=\330m\312\275\000\013,\272M\247\233\275\014\235\035\276\325\350\016>t\240\036\276\316\\\240=\016\016\250\275\346#\376\275!\300\003>\337\333!>\237\356\035>\251\331\">w\000\024\276\340\335\215=\224\217\211=\236\265\361=\247\222\210\275*B\210=\312oV\275\260\024-=}\237\013>C\300\">\020Sj\274B\217\272=\010\277\212<]c\210\275\312\345\315=Z\355\243\275\220\263\304\274\257\255\252\275\340\313\241<W\307\330\275`\007\345;oU(>\t*&\276\220m\342\274\010\352&\276\225\371\325\275\264\256\026=4\230A\275\231\257\035>)\240\006>F-\261\275>Y\364=\000\350-\276w+\r>\316\256\204=PD\310\275\322=\303\275S\251\260\275\003!#\276\342\341-\276k*0\276\231\204\270\275`\325\320\274p\254\351\275L\346q=\240/p\274\340(\265<\246\207\350=`\017\016<\360\241\r=\342\354\357\275\000nJ\275x\351&=\334\324\024\275\240\010?\275\3550\017>\320d\017\274\367 \031>xQ\346\274J\025]\275U\035\201\275_\351\014\276\334;\\=\312B\275=~\030\255=J:&\2767\257\276\275`\004\277\273\340\326\225\274\210\035\335<@\252-\273\017\317\354\275z\315\343=W\014\007\276\224\025\n\275\0008\3558\311\001\002\276\2425\030\276\200\363\254\275\320\263\261\274\022\363\333=\302\202\376=F2\202\275\nh\334=\275D\313\275fE\346=\347\332\201\275\016c\337=\216\337\240=5<\034>\271\277/>\330k:=\327\352\014>\022\177\313=V\017\371=\340\016\020<\322\002\007\276y\021\007\276B\364\306=vt\310=7\027\021>\002[\236=h\355q=@\364@<M\0362\276\300\250\336\273$m\206\275\\7\026=\345\320\020>v~\320=LBb\275B\266\213\275\346\033\372=-\260%>j[\335\275\332A\251=\264\311\353\275\"-\362=\223\2041\276j\221\206=\232\000f\275\363\316\211\275PJP\274\314$\224=y\317#>\000|\253\272\3349\010\276\215\203\020\276\024#3\276\221\224\002>\230*C=\362y\256=P\346\374<nP\324=$\327\212\275\370\365\373<\200\342\372\272K\303\007\276*\271\225=V\223\324\275\214~\035\275M\232\021>[\227\017>\204\330;\275\014\302.\276\362\003\274=4\235(=\216\271\375\275$n\023\275\3479$>\370|\t\276\027)\026>k{\274\275\323\256(>R\034\213=*j\331=\242~\372=\370\277\347<J\354\306={\376\331\275\333\3222>\300\344\034<J\344\352=\220\3038\275\270(\227\274\220)\007<j\277\217=E\223\031\276Z\345f\275\320\001\315\274@\242\022=\0047\336\275vW\246=\225\366\034>\371g\216\275(,?=\254\373\211=\343D\035>\225\t\n>2\346\373\275\330N\205=8\3400=|\223\346\275\022\277\352\275Y\024\224\275f\205\357=\217z\354\275\2749S\2754\347\210=\006\033\377=5\022(>\350[\222\274\240\214\340;mA\024>\272\221+\276T\376\364\275($\260<\356\273\262=\363C\000>\224\376\201=A 4\276`\020,=\203\217\343\275\271\262\026>\260\252P=^\200\264\275\3442:\275\306\035\246=|q\r\275L\3247\275@\342 <t\027\201=\371\3120\276L\237\352\275\nW\312=\004UD\275\354\'1=,\366b=o\341\005>\324q\323\275~i\326=\340g0<\232\205\272=\232\207\275=\220\n\345\274`\366e\275R\356\306=@\277t=\274.#\275e\225 >0W5=7\246 >\"p\254\2753\311\'>\023\004\003\276\342\214 \276^\n\235=\214\321w=\376\204%\276\376`\234\275N\267\337\2759\313\006>\253\2713>X\246\302<\255Q\307\2750\316%<b\252\237=\002\272\260\275\322G\362=:\003\340=>\016+\276\254x6\275\370\267\354\2740\2711\276=\204\354\275\036;\301=\303\003\321\275o\363\335\275n\371\324=r\017\300=W\322\251\275\360\211\027=#\353\027\276\030\354\033\276\000)\000\2733t\035>P\027_<\251^\032\276Y\270\001\276H7*\275O\326#>\226S\013\276\027\206\243\275:\222]\275\377q\">bD\356=L\360F\275N\305\t\276\344Q0=\214p\020\276h\336\225\274\300u\257\274\230>\353\275\026LZ\275\2146\271\275\026\n\236\275<\320\221=\374\214\272\275\004kQ=N6\260=~^\332\275\324)p=`\272s<iT\240\275\262`\253=h\206\347< d\263\273q\351\001>T#T\275:\323\255=\305<\351\275|\233\004=\300\202\374\275\217\204\352\275\240\327\216=\265\002.>\252h\030\276\013\036\372\275\n\377\330=\033\337\326\275\367\375\027>\272e\327=\303\366\334\275\336F\377=\300\252_\273\212O\205=\206\270\277=ci(>\315d\340\275N\234\021\276\r\r\320\275\202\267\350=\326\206}\275\326\341\241=@\3061<\261\340\004\276\366\311\324=\370\3328=\367\301\274\275r\350\345=0\224\017\274hJ\002=\204\304)\276\003E!>#\022\020>\305A\022>\216\363\t\276_\214(>\256\242c\275\215\2432\2762\006\324=\246\235\377=\215\331\025>z\014\360=\016\235\224=\216\010\356=\241\311\037\276\000\210w<0K\n\276\200\003\331:\260\227&\275^\325\317=`_u<8\232\261<Y\266%>\250\271\334\274\200\205L= C1\274\273\357#\276\020+;<\232\035\217=j\206\340=,6\t=N\333\023\276\216\267\247\275\347t\025\276a\241\000>\0274\021\276W\241\006\276\200Q\357;#Z\035>L\235*=\200\353\360\273\2605\010\275>\253\277\275u2->\226Rv\275\205\234\340\275\323\277\016>\320=\016\276\221\375\260\275\032\211\260=Z\214\343=\234\2029=\337\345\365\275\367\343\364\275p\275\n\275B*\257=\276-\356=,:D\2750\330L\275\250\322Y=V\243\224\275\302\275\323=\016\227\231=\020t\276\274R\222\270\275Q|!>\216;\334\275\373\241\004\276 \264\343;\030nP=\2547\225=\200re<A\316\006>\334_\370\275`\207\204\273@\223\026\276\001\307\000>F\354\311=$\221\024\276\032\002\211=Z\321\312=\200b\310;\256\312\341=\276\334-\276\207\2640\276\014\377\366\275\266P\356=\346\207\314\275\315\261\371\275\3665\372\275\3703\013=f\232\362=\336\334\252=/Q\215\275T\360\023=\244f2\275\220\273h<\363\237\025>8\343R=1K.>\000\264\341\274~\321\020\276\000\356*=\323\255!>Zgt\275~l#\276\330\033R\275\360\025\357\274\375_2\276\310\014\364\275\337\200\007>\211j\237\275\361\341\014>\256Q\331\275\254\231+\276\256\261\247=\340\251\003=`Z\272\274f\033\264=\244\360(\275\350\366\305\275V\366\311=\255\233$>\255\303(>\312\317\326=U\3244>\350\304\211=\214\300e\275 \342 \276\314\254.\275@\362\027\275\306\217\267\275\317\352*>\000\376t<O\232\210\275\302t+\276=c \276\3201b\275\320\357\"\276\302\366\374=\232\006\r\276A\021\020\276\006\032\352=X\307\267\274\303\213->\320tz=T\272\365\275\350\252\270\274:\277\217=\323\2122>\304_\224=M\3740\276C\333-\276;m\340\275\320\230f\2740`O\2758\376\363<\233\215\036>r\213\323=\026Q~\275\255\202\002>P\177\357<\331O\021>DS =\335\313\325\275\244\347i=P*\014\274\331g\037>\233\\ >hj\224=\204i\022\276\350e\363\275\002\222\304=\236\"\355=H\273\302\274\024\242$\275\223Q\020>\t\327#>\212\006\267=\311\352 \276\260\322\"=\346\261\312=s\032\031>\300\022\266\274\360\036X<0\373\r\275z\017(\2765\005\237\275\340\256\316\273\26104>\263\245/>Y\240\025>\300\255m<\265\304\031\276\254\213\360\2750\320a\274\013\256)>\232Y\242=\334k\347\275\363\014\250\275Yu\221\275L\017\332\275\374\355\017\275i\226,>\230_\345\274]0*>\020\321w=v\312\220=\330f\332\275\237y\230\275\274\322\014=L(\024=\373\357\020\276X\251\363\274\330\0371=\241\335\">\256\225$\276h\241\016\276u\372\035\276\206*\266=;\363/\276xA\377\274G\2202>\002\326\330=\214\031c\275\340\362 =z\013\250=\204\0144\276\366\306\307=5\265\010>\341\022\306\275\254\326!=\000>\217\271\031\217\037>\020u\371<\236M\264=#\030\006>x\325\302<\272\277\217=`\210}<\340\037\025=\376\333\313\275\243\350\002>Q\201\260\275\n\300\303=\212q\244=\260\002\331<\034\027\336\275Rp\316=g\323*>i@*>$nK\275b_\371=&\312-\276b>\362=[\2264>z)\007\276\222\217\204=w\222\021>\320\347\217<\225\3640>\"\004\276=\210\263\274<x\005&\275\243f\367\275D\261\233\275\300Q\014\274\353e\013>\213u\021>\177\275\'\276\254S7=\314\r\005=\ty\267\275\020\315\244\275\334\304\021\276\333\246\333\2750\3542<\370\031#=rK\205=MS\323\275+\270\000>\006f\311=4\317 \276\360.\313<\244\036y\275\350\356*\275\331\355\027>TW\033\275y\020)>\302\005\274=\235s*\2768\315E\275\210PI\275^\306\237=\'%\216\275\004c1=\r\311\347\275O\272\207\275\334\033T\275lJR\275\005\226\022\276\220\354\034<@\246\032\276_9\032>)Q/\276\320\375\376\275"
  }
  initializer {
    dims: 32
    dims: 32
    data_type: 1
    name: "onnx::MatMul_449"
    raw_data: "c:\270\275\3407\227\275K}\351\275\330a\317<@2\036\273&\210\203=\366D\262=<\375\256\275A\370\030>\340:\327<\265\2051\276H\203\'\275\340yS\274\300\214\366\273\314\t\001\276V%\247=\002\t\242=XO\251<\274\256\024=\214gI\275\353\212\023>bj\263=\243C\300\275\373\227\n>\321!+>\000\"Q\272\214{k\27570\246\275\206\243\374=\020\243*=\031\330&>\245*\251\275\335H\005>\242*\033\276\312l{\275\377\275&\276\346\206\250=\265\255\200\275\226z\303=.\266\344=\020\026\312<\333\001\362\275%\350.>\326\'\013\276\212(\365=\036j\241\275\260\\\223=\006e\242=\220\245#\276\031J3\276\000\r\372\272!\227,\276bA\236\275~\200W\275\340)H\274p\r\314<\240\3444<H\234\213<lH\r\276|\321\r\275\237\034\003>h\023l=\020j\212<o\321\350\275\030`\250<\220\314\213=\204@F\275D\245\032\275\027~\355\275\253\265\321\275\035\245\024>\036\332\351=\"\216 \276fV\310=oN\033>\020:\363\274\022l\355=\000`X\273\"\263\277=\3001\261\2759a\n>e\317!>Js\355=\362\212p\275{!$>\340\322:=\030\375\205=\201\2413>\304R\177\275\344\022\034\276P\010\005\275#\340\237\275X\270\267\275v[\267\275\340q\302\275\004w*\276$\227!=\010\256W\275\316w\340=t\312[=$\003\017\275B;\335=\000\335M\274\334\2776=\313x\205\275\302@\000\276:\013\347\275\271\004\000>\000>\3429\223\375\020\276\312\016\244=\226!\324=(/\260\2742\000\330=\223\n\200\275\375\'%>\327\202\347\275 N\271<\365\211\026>$\323@=\363\242\014>\000\352\277:\350\342\353\274\023$\037>>\333m\275\\\241\"\276`\307\363<St$\276eo\256\275a\343\242\275\034Z\036\276D\253D\275\010\343\021\276\370G\243\274`a\352;\244D^\275e5\033>\010\007\303\274f7\260=p+><\307\354\226\275\"\254\201=\210e?=\375\340\005>P\2141=\024\212!\275\372\004f\275\210\216\026\275g0\325\275p\245\253\275\220\245T<U~3>\257\211$>>\216\303\275F\317\362=\022\223\261=\360\235\220=o\0373\276\026p\203=\362\022\236=\332#\342=\032R\325=`\274\020\276\300\255\001\276\235\030,>\347\026 >*\204\241=\350\016\260\274\205\205*\276\303\365&>\022\260\312=\032\337\205\275\236p\223\275\020\370M<\230\223Z\2753O,\276 \266C<\300OD\273\241\235\356\275\230\264\023\276\340o \275\353\263/\276\245\2654\276\356\325\244=\264\313\026=\314>\007=\273\034\016\276\315B&> 9t<\364\\\351\275\367\373&>yl\030>p)\307\275R\t\276=\017\n\020>\212\364\356=\336\325\213=+\236+\276\276\331\355=\220\207\301<u\322(>\370\004\211\275\334\204%=9\002\031\276\250]0=8\326\303\274\200\224\322<\000\336/\276\226\006\377=\333)\026>\236\200\206=\010\361\240\274\324\351\025=\212\034\177\275\200\205\233\274\352(\177\275\352y0\276\220t:\275\310\026%\276\0268\276=R\217\t\276\273\340\006\276 \336\307;\240$\250\2744\3074\276\220\224\244<^j\261=\200z`;bW\005\276\213\262\004>8;\324\274\240\356\365;\342I\014\276\014\315v=\231\245\345\275\tf\034>\272\237z\275\320=t<\266\372\234\275\365$\021>\316w\200=\200\260\271\273\324\245*\275\226<\244=\324\0039=J\337\332=\002/\333=\'\2772>\314s\005\276\016\226\243=(\300\232\274lp}=\016\315\216\275B\302\366=\202\023\372=\024$\270\275]\250\004>nT\351=\2542,\275\232M\301=\300\021C<\"\243\212=\265\n\034>\031\'\035>B\037\\\275`\334\235\273\336\362\330=\310[\205<\\3\177\275\35371>\262\372\327=\010\232\375\274:g\333\275:\r\340=k\263\267\275\370\020\020= f\252<\376\034\351=|\233\234\275\004\003.\276\322Q\367\2750\006\341\275\336\211\363=\220\250f=\370\270\'\276i\367\026>\000\247\367:\024\010)\275\212\246\256\275`2\206;\270#2\275i\304\035>]\225\035>\016\272\226=l\216s=\010\2166=jy\342=fI\032\276\356H\366\275\356z\314=_\252\n>\030Y\357\274\342\365\207\275a\330\022>\014%!\276\006\306n\275\216\326\227=\333\361\031\276\220V\307\274\203\200+>8\242}=\340I|<\331:\023>\215\365->\0001\344\274\032\377\014\276#\"+>,\300*=\240%\273\2742f\364=z\t\303=\270\251M\275\246\216\267=\344\227W=$\030X=\275c\n>\244\214\243\275j\021\272=\300%\234\273\360\307L\274\210\374\302<&\314\310=N\240\364\275\321p\025>QM\035\276\324x\347\275Bl\317=\2133\267\275 \316\032\274z\276\312=\010\277\320<\372W\303=\201s\305\275V`\255=SX\035>\307\326\030>\271h\n>\240PF\275\251\353\014\276\026\022\346=\200\231\022\274\273D\021>\260J\217\275\207\027\361\275\000\001\'\273o\235\376\275\350\330\302\2744\324\355\275\300\321\n\276f\006\350=\207/\024\276x\312~\275\363o\021>\306\272\355=?R*\276\226.\214\275p\323\376\275\202[#\276\273\317\367\275\027p\037>\224\301=\275\305\225\022\276\001\376\025\276#\014\n>P%:<d\200D\275\000\246\245<\304\222\031=9$\212\275\320[\360\274\310\311]\275\276`\301\275\200\013\301: \'\223\273\240,|<\374\355\364\275>\227\304=\260G\355<>g\323=\004\314\233\275z\217\306= \250!\276`\311\334\274\334\300!\275X`\242<\250S\263<\240x\023\275\256\002k\275\304\317\000=W\020\006>@\254s\274\360\246\216<P\024\343\274\332Z\241=\373\217\002>p>\212=~3\312=\300\273\223\274\330\025\312\275^\022\021\276\027x\000>z%t\275\260o#\274\351\013\020\276\206q\355=\t\246\265\275\340b\035<p\377\230\274\212\233\304\275\256Cp\275\270\2363=R\030*\276\240h\355\274&\231\336\275\327\016/\276P\203^\274n<\r\276\010K\271\274\016r\267\275\n\315\226=\364\353\314\275\204O\r\275c\2353\276\267X*\276\263\360-\276x\263\212<\036\324\203\275\037\2762\276\177\t\034>\220\240\n=\262{\230=\'\374\021>L\342\017\275~\345\376\275\330\007\016=\024\372Q=\260y\013\274\232\222\020\276\250\305\267<\250\351\032=\250p\347<\302\255\346=\000\324T\274\340\212d=^O\246=nO\346=\030\234\225\275\000<79\313\246\301\275\372,\237=\254\313\024\275p\340\221<tA\362\275\036\014a\275\021\'\r\276\334\203|=@\000.;[n\006\276{\252/>H&o=n\025\222\275\332\335\366=$\244E=\203\325*>[\251\001>\375\352\211\275\001\317\205\275`o\307\2733\322\010>\000,\267\274Xo\264\274(K\321<\263n.\276\364\244M\275\010\373\310\274\367\330\243\275\000\345\213=\300\301\014;\2373\007>8\353)\276\276z\355=8\222\035\276}{)>\220\222\372\274\300p\345\275\226\374\344=\240\355\250\274@\316\260\273@\264\261;\346\354\204=\343\255\032\276\360>X<@ej\274\200\371\205\2742\244\360=\320\021\303<\030\003\310</\234\322\275\340P\020\275\251\340+>\360\017\220\275\320\222B=\204*\205=Z\363\375\275\3645\275\275\214\364\356\275EO\321\275\342t\355=\213Y\033>\030\206\022\275*2\316=\020\022X<\010:\344<\242s\270=\250%\260\274EA\336\275\022\224\373=1\256\030>\020\014p<A\223\014>4J\223=\234\014\221=\275\201\034>\310\227\263\2748)\336<\220t\024\275\313\326\312\275\234\016\036\276\200\272\345\274\\\315\t\276\277\275\031>r\260\350=>;\330=\350r\016\2750\333^=\273~\252\275\240\013Y=\336\343\375=;\325\023>\266\375\374\275\364\373w=\022l1\276\346\002\230=`\337\203\273\204\252;\275X\030\317\274\310\002\220=\300\262\013\2765\262\031>\030\256\256\274D\002\324\275IN\034>\376\220\304=.\010\r\276\360\240\003=\216\014\204=\265^\n\276\340J1\2740\257\355<\276O\n\276L|\001\276f@\343=\272\331\330\275h\313\363\275\016C\356\2751\320\001>\332%\237=\310a\200=\316\236\313\275\204\013,\275o\247\355\275\356\233\327=\376\273 \276\370u\355\275\t\032&>\200(\364\272\367Q\014>\260\210\230<\037}\340\275\010z\t\275\2240\023\276\274b\357\275\032\335\032\276\223G\'>\352j\004\276J\211\244=`\223Y\275\247/\r>\016\t\023\276\335\025\253\275\230\316@=`\267S<\200\227\270\274\364[(\275\310\245X=\026k\363\275\342\240\377=\030\246\322\2755\310\331\275\3269\000\276\220v\000=\360\365x\274\3547\022\276D\232&\275/[\236\275Qq\254\275\026\315\353\275\300\330\007\275D\021\036\275\031\370#>\026\351\253=\362\306\277=N\206\324=\037\000\">\220o8<\026\210\323=0\003\n\276\352\022\222=\336 \330=\024\000\026\276\372\254\276=\035(\033>2\315\033\276@\334J<P:\271<\267V\251\275\026\246\357\275\300\214C\273\341\367\311\275X\215\310<\302\311\350=\r\261\001>\020J\032\276\3605|\274q=\252\275\223j\'>\304\351\345\275\334+\222=\300$\321\273L\211\032\275\005\013\315\275`+d\275\324W\004=\017\315\">\210\0059=p\374\n=\266x\340=&g/\276~>\327=\274\031\376\275\367\024\030>\000\000X7F0v\275\000~\322\274QH\014>ry\373=\276\240s\275<\320m=\237\r\036\276Q\240\221\275\177\255\343\275rF\247=\022\031\002\276x`J\275\0027\307=\275\301+\276\233\326\341\275\264\001\217\275\262\210\t\276_61>\376?\342=\377\354\"\276\\\317I\275\010\013\330<\320\244\223\275#\033)\276\220\205\240\274\231v\006>r\264\317=\310\276B\275\210\021\230\274\200\300\014\2740_\010\275J\317\216=\200\372\312;_C3>\250\201}=\231\273\301\275X$2\276h5\360\275\344\n`\275\311\002\020\276\340\330F\274\300#\342;\327\003\035><\022\n\276\210\2041\275\0004-:i\251\026\276\300\334x\274{\341\004>b\264\333=\243\253\014>\272\344\244\275\014\232\026=<\317*=)\327\020\276\232Q\266=\236\204\253=`\354N\274\250\277\367\275\250l\n\276@d\331<_,(\276\21094=U\366\"\276:\237\262=\241\236/\276\337O\023>\333\342\">\027\000\223\275Ar\026\276R\365\001\276\214\203\324\275\340\351K<\310\257\237\274\224s&\275J\335\240\275~\301\032\276\r\372\271\275\344\340/\275lF\261\275+=\336\275\310A\276\275\263m\325\275\235\014)>\240\364\022\274\314\337!\275\346\302\340=\370\262\230<B\265\030\276\020\222\263\274[\230\020\276n)\256=\275\"\322\275\010\313\252\274\377\036\021>\367*\021>\360d\272<\200\027\264\273\026_\245=\234\037\024=\032\344\365=\360\213\260<\221\275\220\275\2101\031\275\223\363\306\275\350N\331\274\232D\313=\030R3\275\371\001&>\030rU\275@\266 \276*5l\275`\377\360\273\204\313E\275\207-!>q4\332\275\364\272P\275\004\264\006\276\214\247\274\275z\377\356\275-\207\302\275n}\371=t\250\036\275 c\014<\250?\356\274\200\023f\2754/\353\275JV\025\276\314\026\006\276lDk=\272\227\377=\030{\221<3\020(\276\020\3241\276PY\230\274\207\260%\276\341\355\007\276\352\251\351=\270J\316\274\302\206\230\275\270\312\331<\033\357\204\275@\233%=0\210\263<i\347\030>\336\332\274\275`\300\002\274 S*\276\r\372\027>\305\265\031\276\306\177\344=h\036\273<\346X\340=\342\353\322=hu.\276\360\216\315<\024\rW\275\"\274\211\275\0206\326\274W\005\023>\006\343\"\276\306\342\323=\352\352\'\276\267\266\022>\\wq\275\273?\022\276\220l\226\274\262\232\357\275\363\313\002>W\312\030>pS\013\275\370R\376\275\320\311%<\276R\343\275\300\201k<\"S\326\275\013\217\013>\256c\265\2756\004\313=\340I\364\273C\364\320\275\007\275\'>\032\364\245\275\266\006\314=\374C<=\\\270/\275\350\234-=:`\232=\2423\344=\20031\275D\203M=F\367\344=1\013\333\2750\362h\274\000f\232;\240\244S\274h\177\245\274\343\202\251\275`8\204=;\014\362\275\2428\300\275\030\331\325\274\0168\024\276\223\036\004>`\342\010\274\222\324\231=\333\230\010>9#\030>\260\353!\274\235<\004>\344O\002\276\240]9\275E\371\225\275\376 |\275d_\025\276\000\352\260\272~X\271=\235i\024>\2748\021\276\202\265\000\276\3007\256<\003`\030>H\277\227\274o\242\323\275\030\233\021\276\330\036$=\240\031Q=\'\366\301\275\200\223\255;\303\365\034\276\227\277\033\276D\373\306\275\0308#=\302\t\016\276\376W\326=\004\3173\276x\270>\275\343\037.>\304\257\225=\\\025<=\375\311\032\276\367s\026>\242\277\232=\025\256\326\275[\016\000>\306\274\310=l\312a=\247j\032>0\275H\275\372\252\t\276jR&\276\271e(>\006J\211=\200\017\016\275\034_\206\275\000\274\017;\013\364\021>&\305\364\275p/\224<\006*\374=\310\313\202\275hy!\276\023\207\332\275*v\354\275\300\2549<qK\013>\013w$\276\352\021\200=\214Q\022\275\000\247\262\272\013\322\215\275\024^\250\275\000\302\006\276\370\375\371\275\366\r\024\276\240\000Z\275\220\257\366\275\r\304\037>Fe\313=\373\277\320\275\224\373#=\014\252/\276\242M\250=\3456\233\275\234\031\221\275\256y\347=\220\304\201\275w3\242\275\344\016\205=D\010q=Z\330\242\275\350=\247<\346\325\363=\260x\315\275\234Xx=\346@\223=\277]\001>`f\265\275\024\253\001=<&\004\276\212\226\230=v^\255=wJ\027\276wp\014>_\274\035>\331\337->6\260\030\276\013T\026\276\304{_=\341\267\030\276Ym1\2768\037\374<u,\003\276\200O\363\272\233\0022\276\370O\304\274\033m\372\275\310\020\275<\324\226\260\275\010*O\275\214\n,\276;\325\245\275\373\356\027>\\\366`=\207q\260\275\2449&\275\0251\014\276g\347\030>\210#\260\274\350\350p=\222!\333=\302u\355\275\177\024,\276\264e\200=\274\333\026=\200\177$\274\332\304\r\276\000U\246<\346|\315=n\367\230\275\220\n:<\373z&>\304~\035=\215\324\033\276N8\377=\034\201&\275\"\'\334=>B\013\2766\243\255=\023D,\276G\366*>D79=\303z\n>P*\305<\352\245\275=\300\305\031;\230\315\213=\216+\252=\343v2>\202.\333=\376\021\037\276\253\376\023>"
  }
  input {
    name: "x_dict"
    type {
      tensor_type {
        elem_type: 1
        shape {
          dim {
            dim_param: "x_dict_dynamic_axes_1"
          }
          dim {
            dim_param: "x_dict_dynamic_axes_2"
          }
        }
      }
    }
  }
  input {
    name: "edge_index_dict"
    type {
      tensor_type {
        elem_type: 1
        shape {
          dim {
            dim_param: "edge_index_dict_dynamic_axes_1"
          }
          dim {
            dim_param: "edge_index_dict_dynamic_axes_2"
          }
        }
      }
    }
  }
  input {
    name: "edge_attr_dict"
    type {
      tensor_type {
        elem_type: 7
        shape {
          dim {
            dim_param: "edge_attr_dict_dynamic_axes_1"
          }
          dim {
            dim_param: "edge_attr_dict_dynamic_axes_2"
          }
        }
      }
    }
  }
  input {
    name: "edge_index"
    type {
      tensor_type {
        elem_type: 7
        shape {
          dim {
            dim_value: 2
          }
          dim {
            dim_value: 1
          }
        }
      }
    }
  }
  input {
    name: "edge_index.5"
    type {
      tensor_type {
        elem_type: 7
        shape {
          dim {
            dim_value: 2
          }
          dim {
            dim_value: 1
          }
        }
      }
    }
  }
  input {
    name: "edge_index.3"
    type {
      tensor_type {
        elem_type: 7
        shape {
          dim {
            dim_value: 2
          }
          dim {
            dim_value: 0
          }
        }
      }
    }
  }
  input {
    name: "onnx::Reshape_9"
    type {
      tensor_type {
        elem_type: 7
        shape {
          dim {
            dim_value: 1
          }
          dim {
            dim_value: 1
          }
        }
      }
    }
  }
  output {
    name: "out"
    type {
      tensor_type {
        elem_type: 1
        shape {
          dim {
            dim_param: "Gemmout_dim_0"
          }
          dim {
            dim_value: 1
          }
        }
      }
    }
  }
  output {
    name: "other_out"
    type {
      tensor_type {
        elem_type: 1
        shape {
          dim {
            dim_param: "x_dict_dynamic_axes_1"
          }
          dim {
            dim_param: "x_dict_dynamic_axes_2"
          }
        }
      }
    }
  }
}
opset_import {
  version: 14
}
